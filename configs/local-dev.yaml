############################
## Astronomer configuration
## For local Kubernetes development
## There should be an A record on *.local.astronomer-development.com
## with the value 127.0.0.1 and you should set up
## the secrets and TLS cert normally.
############################

tags:
  platform: true
  logging: false
  monitoring: false
  keda: true
  kubed: true
  postgresql: true
  nats: true

global:
  # Base domain for all subdomains exposed through ingress
  baseDomain: local.astronomer-development.com

  # Name of secret containing TLS certificate
  tlsSecret: astronomer-tls
  postgresqlEnabled: true
  nats:
    replicas: 1
    enabled: true
  stan:
    replicas: 1
    enabled: true
  sslmodeEnabled: false
  # Custom CA TLS certificates
  # Each secret must have one data entry 'cert.pem'
  privateCaCerts:
  - private-ca

nats:
  cluster:
    enabled: false
    replicas: 1
  resources: {}

stan:
  stan:
    replicas: 1
  store:
    cluster:
      enabled: false
  resources: {}

############################
## Astronomer configuration
## Omit resouce requests
############################
astronomer:
  astroUI:
    replicas: 1
    resources:
      requests:
        cpu: "0m"
        memory: "0Mi"
  houston:
    replicas: 1
    worker:
      replicas: 1
    resources:
      requests:
        cpu: "0m"
        memory: "0Mi"

    config:
      emailConfirmation: false
      auth:
        local:
          enabled: true
  commander:
    replicas: 1
    resources:
      requests:
        cpu: "0m"
        memory: "0Mi"
  registry:
    resources:
      requests:
        cpu: "0m"
        memory: "0Mi"
  install:
    resources:
      requests:
        cpu: "0m"
        memory: "0Mi"


#################################
## Nginx configuration
#################################
nginx:
  replicas: 1
  replicasDefaultBackend: 1
  # Configure resources
  resources:
    requests:
      cpu: "500m"
      memory: "1024Mi"
    limits:
      cpu: "1"
      memory: "2048Mi"

#################################
## Grafana configuration
#################################
grafana:
  # Configure resources
  resources:
    requests:
      cpu: "0m"
      memory: "0Mi"

#################################
## Prometheus configuration
#################################
prometheus:
  replicas: 1
  # Configure resources
  resources:
    requests:
      cpu: "0m"
      memory: "0Gi"

prometheus-postgresql-exporter:
  replicaCount: 1
  # Configure resources
  resources:
    requests:
      cpu: "0m"
      memory: "0Gi"

#################################
## Elasticsearch configuration
#################################
elasticsearch:
  # Configure client nodes
  client:
    replicas: 1
    resources:
      requests:
        cpu: "0"
        memory: "0Gi"

  # Configure data nodes
  data:
    replicas: 1
    resources:
      requests:
        cpu: "0"
        memory: "0"

  # Configure master nodes
  master:
    replicas: 1
    resources:
      requests:
        cpu: "0"
        memory: "0Gi"


#################################
## Kibana configuration
#################################
kibana:
  # Configure resources
  resources:
    requests:
      cpu: "0m"
      memory: "0Mi"


#################################
## Fluentd configuration
#################################
fluentd:
  # Configure resources
  resources:
    requests:
      cpu: "0m"
      memory: "0Mi"


#################################
## Kube State configuration
#################################
kubeState:
  # Configure resources
  resources:
    requests:
      cpu: "0m"
      memory: "0Mi"
