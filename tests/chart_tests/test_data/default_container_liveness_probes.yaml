# Each key here is a pod_container.
alertmanager_auth-proxy:
  httpGet:
    path: /healthz
    port: 8084
    scheme: HTTP
  initialDelaySeconds: 10
  periodSeconds: 10
aocm_manager:
  httpGet:
    path: /healthz
    port: 8081
astro-ui_astro-ui:
  httpGet:
    path: /
    port: 8080
  initialDelaySeconds: 10
  periodSeconds: 10
commander_commander:
  failureThreshold: 5
  httpGet:
    path: /healthz
    port: 8880
    scheme: HTTP
  initialDelaySeconds: 10
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
elasticsearch-client_es-client:
  httpGet:
    path: /_cluster/health?local=true
    port: 9200
  initialDelaySeconds: 90
elasticsearch-data_es-data:
  initialDelaySeconds: 20
  periodSeconds: 10
  tcpSocket:
    port: 9300
elasticsearch-exporter_metrics-exporter:
  httpGet:
    path: /healthz
    port: http
  initialDelaySeconds: 30
  timeoutSeconds: 10
elasticsearch-master_es-master:
  tcpSocket:
    port: 9300
fluentd_fluentd:
  exec:
    command:
    - /bin/bash
    - -c
    - if (( $(ruby -e "require 'net/http';require 'uri';uri = URI.parse('http://127.0.0.1:24231/metrics');response
      = Net::HTTP.get_response(uri);puts response.body" | grep 'fluentd_output_status_buffer_queue_length{'
      | awk '{ print ($NF > 8) }') )); then exit 1; fi; exit 0
  failureThreshold: 3
  initialDelaySeconds: 30
  periodSeconds: 15
  successThreshold: 1
  timeoutSeconds: 5
grafana_auth-proxy:
  httpGet:
    path: /healthz
    port: 8084
    scheme: HTTP
  initialDelaySeconds: 10
  periodSeconds: 10
grafana_grafana:
  httpGet:
    path: /api/health
    port: 3000
  initialDelaySeconds: 10
  periodSeconds: 10
houston_houston:
  failureThreshold: 10
  httpGet:
    path: /v1/healthz
    port: 8871
  initialDelaySeconds: 30
  periodSeconds: 10
kibana_auth-proxy:
  httpGet:
    path: /healthz
    port: 8084
    scheme: HTTP
  initialDelaySeconds: 10
  periodSeconds: 10
kube-state_kube-state:
  httpGet:
    path: /healthz
    port: 8080
  initialDelaySeconds: 5
  timeoutSeconds: 5
nats_nats:
  httpGet:
    path: /
    port: 8222
  initialDelaySeconds: 10
  timeoutSeconds: 5
nginx-default-backend_default-backend:
  httpGet:
    path: /healthz
    port: 8080
    scheme: HTTP
  initialDelaySeconds: 30
  timeoutSeconds: 5
nginx_nginx:
  httpGet:
    path: /healthz
    port: 10254
  initialDelaySeconds: 30
  timeoutSeconds: 5
pgbouncer_pgbouncer:
  tcpSocket:
    port: 5432
postgresql-master_release-name-postgresql:
  exec:
    command:
    - sh
    - -c
    - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
  failureThreshold: 6
  initialDelaySeconds: 30
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
postgresql-slave_release-name-postgresql:
  exec:
    command:
    - sh
    - -c
    - exec pg_isready -U "postgres" -h 127.0.0.1 -p 5432
  failureThreshold: 6
  initialDelaySeconds: 30
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 5
prometheus-blackbox-exporter_blackbox-exporter:
  httpGet:
    path: /health
    port: http
prometheus-node-exporter_node-exporter:
  httpGet:
    path: /
    port: 9100
prometheus-postgres-exporter_prometheus-postgres-exporter:
  initialDelaySeconds: 5
  periodSeconds: 10
  tcpSocket:
    port: 9187
prometheus_auth-proxy:
  httpGet:
    path: /healthz
    port: 8084
    scheme: HTTP
  initialDelaySeconds: 10
  periodSeconds: 10
prometheus_prometheus:
  failureThreshold: 3
  httpGet:
    path: /-/healthy
    port: 9090
  initialDelaySeconds: 10
  periodSeconds: 5
  timeoutSeconds: 1
registry_registry:
  httpGet:
    path: /
    port: 5000
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
stan_stan:
  httpGet:
    path: /streaming/serverz
    port: monitor
  initialDelaySeconds: 10
  timeoutSeconds: 5
