#####################################
## Astronomer Registry StatefulSet ##
#####################################
{{- if .Values.global.baseDomain }}
{{- if or (eq .Values.global.plane.mode "data") (eq .Values.global.plane.mode "unified") }}
{{- if or .Values.registry.gcs.enabled .Values.registry.azure.enabled .Values.registry.s3.enabled }}
kind: Deployment
apiVersion: apps/v1
{{- else }}
kind: StatefulSet
apiVersion: apps/v1
{{- end }}
metadata:
  name: {{ .Release.Name }}-registry
  labels:
    component: registry
    tier: astronomer
    release: {{ .Release.Name }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: {{ .Release.Service }}
    plane: {{ .Values.global.plane.mode }}
  {{ if .Values.global.enableArgoCDAnnotation }}
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
  {{- end }}
spec:
  replicas: {{ .Values.registry.replicas }}
  selector:
    matchLabels:
      component: registry
      tier: astronomer
      release: {{ .Release.Name }}
{{- if and (not .Values.registry.gcs.enabled) (not .Values.registry.azure.enabled) (not .Values.registry.s3.enabled) }}
  serviceName: {{ .Release.Name }}-registry
{{- end }}
  template:
    metadata:
      labels:
{{- with .Values.podLabels }}
{{ toYaml . | indent 8 }}
{{- end }}
        component: registry
        tier: astronomer
        release: {{ .Release.Name }}
        app: registry
        version: {{ .Chart.Version }}
        plane: {{ .Values.global.plane.mode }}
        {{- include "global.podLabels" . | nindent 8 }}
      annotations:
        checksum/configmap: {{ include (print $.Template.BasePath "/registry/registry-configmap.yaml") . | sha256sum }}
        checksum/jwks-secret: {{ include (print $.Template.BasePath "/registry-auth-secret.yaml") . | sha256sum }}
{{- if .Values.global.podAnnotations }}
{{ toYaml .Values.global.podAnnotations | indent 8 }}
{{- end }}
{{- if .Values.registry.podAnnotations }}
{{ toYaml .Values.registry.podAnnotations | indent 8 }}
{{- end }}
    spec:
      serviceAccountName: {{ template "registry.serviceAccountName" . }}
      nodeSelector:
{{ toYaml (default .Values.global.platformNodePool.nodeSelector .Values.nodeSelector) | indent 8 }}
      affinity:
{{ toYaml (default .Values.global.platformNodePool.affinity .Values.affinity) | indent 8 }}
      tolerations:
{{ toYaml (default .Values.global.platformNodePool.tolerations .Values.tolerations) | indent 8 }}
      restartPolicy: Always
{{- if eq .Values.global.openshiftEnabled false }}
      securityContext: {{ toYaml .Values.registry.podSecurityContext | nindent 8 }}
{{- end }}
{{- include "astronomer.imagePullSecrets" . | indent 6 }}
      initContainers:
        - name: etc-ssl-certs-copier
          volumeMounts:
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs_copy
          image: {{ template "registry.image" . }}
          imagePullPolicy: {{ .Values.images.registry.pullPolicy }}
          command:
            - sh
            - -c
            - |
              if [ -d /etc/ssl/certs ]; then
                cp -r /etc/ssl/certs/* /etc/ssl/certs_copy/
              else
                echo "No /etc/ssl/certs directory found, skipping copy."
              fi
          resources: {{- toYaml .Values.registry.resources | nindent 12 }}
          securityContext:
            readOnlyRootFilesystem: true
            {{ toYaml .Values.securityContext | nindent 12 }}
          env:
          {{- if .Values.registry.extraEnv }}
            {{- toYaml .Values.registry.extraEnv | nindent 12 }}
          {{- end }}
      containers:
        - name: registry
          image: {{ template "registry.image" . }}
          securityContext:
            readOnlyRootFilesystem: true
            {{ toYaml .Values.securityContext | nindent 12 }}
          imagePullPolicy: {{ .Values.images.registry.pullPolicy }}
          env:
            - name: REGISTRY_NOTIFICATIONS_ENDPOINTS_0_HEADERS
              valueFrom:
                secretKeyRef:
                  name: {{ template "registry.authHeaderSecret" . }}
                  key: authHeaders
            - name: REGISTRY_HTTP_SECRET
              {{- if .Values.registry.httpSecret }}
              value: {{ .Values.registry.httpSecret }}
              {{- else }}
              value: {{ randAlphaNum 32 }}
              {{- end }}
          {{- if .Values.global.privateCaCerts }}
            - name: UPDATE_CA_CERTS
              value: "true"
          {{- end }}
          {{- if .Values.registry.extraEnv }}
            {{- toYaml .Values.registry.extraEnv | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.registry.resources | nindent 12 }}
          volumeMounts:
            - name: etc-ssl-certs
              mountPath: /etc/ssl/certs
            - name: config
              mountPath: /etc/docker/registry
            {{- if not .Values.registry.enableInsecureAuth }}
            - name: jwks-certificate
              mountPath: /etc/docker/ssl
            {{- end }}
            - name: data
              mountPath: /var/lib/registry
            {{- if and .Values.registry.gcs.enabled .Values.registry.gcs.useKeyfile }}
            {{- include "registry.gcsVolumeMount" . | indent 12 }}
            {{- end }}
            {{- include "custom_ca_volume_mounts" . | indent 12 }}
          ports:
            - name: registry-http
              containerPort: {{ .Values.ports.registryHTTP }}
          {{- if .Values.registry.livenessProbe }}
          livenessProbe: {{ tpl (toYaml .Values.registry.livenessProbe) . | nindent 12 }}
          {{- else }}
          livenessProbe:
            httpGet:
              path: /
              port: {{ .Values.ports.registryHTTP }}
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          {{- end }}
          {{- if .Values.registry.readinessProbe }}
          readinessProbe: {{ tpl (toYaml .Values.registry.readinessProbe) . | nindent 12 }}
          {{- else }}
          readinessProbe:
            httpGet:
              path: /
              port: {{ .Values.ports.registryHTTP }}
            initialDelaySeconds: 10
            periodSeconds: 10
            timeoutSeconds: 5
          {{- end }}
      volumes:
        - name: etc-ssl-certs
          emptyDir: {}
        - name: config
          configMap:
            name: {{ .Release.Name }}-registry
            items:
              - key: config.yml
                path: config.yml
      {{- if not .Values.registry.enableInsecureAuth }}
        - name: jwks-certificate
          secret:
            secretName: {{ include "houston.jwtCertificateSecret" . }}
      {{- end }}
        {{- include "custom_ca_volumes" . | nindent 8 }}
      {{- if and .Values.registry.gcs.enabled .Values.registry.gcs.useKeyfile }}
        {{- include "registry.gcsVolume" . | nindent 8 }}
      {{- end }}
{{- if or (not .Values.registry.persistence.enabled) (.Values.registry.gcs.enabled) (.Values.registry.azure.enabled) (.Values.registry.s3.enabled) }}
        - name: data
          emptyDir: {}
{{- else }}
  volumeClaimTemplates:
    - metadata:
        name: data
        {{- if .Values.registry.persistence.annotations }}
        annotations: {{- toYaml .Values.registry.persistence.annotations | nindent 10 }}
        {{- end }}
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.registry.persistence.size }}
        {{- include "registry.storageClass" . }}
{{- end }}
{{- end }}
{{- end }}
