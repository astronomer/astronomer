################################
## Houston JWT Key Secret
#################################
{{- $ca := genCA "ca" 3650 }}
{{- $cn := printf "%s-houston" .Release.Name }}
{{- $altName1 := printf "%s.%s" $cn .Release.Namespace }}
{{- $altName2 := printf "%s.%s.svc" $cn .Release.Namespace }}
{{- $cert := genSignedCert $cn nil (list $altName1 $altName2) 3650 $ca }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ template "houston.jwtKeySecret" . }}
  labels:
    component: houston
    tier: astronomer
    release: {{ .Release.Name }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: {{ .Release.Service }}
  annotations:
    {{- if .Values.houston.regenerateCaEachUpgrade }}
    "helm.sh/hook": "pre-install,pre-upgrade"
    {{- else }}
    "helm.sh/hook": "pre-install"
    {{- end }}
    # before-hook-creation	Delete the previous resource before a new hook is launched (default)
    # This ensures that 'pre-upgrade' hook will not collide with existing secret, the previous
    # secret should be cleaned up before running the next pre-upgrade hook.
    "helm.sh/hook-delete-policy": "before-hook-creation"
    "helm.sh/hook-weight": "0"
type: Opaque
data:
  tls.key: {{ b64enc $cert.Key }}
---
################################
## Houston JWT Certificate Secret
#################################
apiVersion: v1
kind: Secret
metadata:
  name: {{ template "houston.jwtCertificateSecret" . }}
  labels:
    component: houston
    tier: astronomer
    release: {{ .Release.Name }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: {{ .Release.Service }}
  annotations:
    # Indicate that we want to sync this to airflow namespaces
    "kubed.appscode.com/sync": {{ (printf "platform-release=%s" .Release.Name) | quote }}
    {{- if .Values.houston.regenerateCaEachUpgrade }}
    "helm.sh/hook": "pre-install,pre-upgrade"
    {{- else }}
    "helm.sh/hook": "pre-install"
    {{- end }}
    # before-hook-creation	Delete the previous resource before a new hook is launched (default)
    # This ensures that 'pre-upgrade' hook will not collide with existing secret, the previous
    # secret should be cleaned up before running the next pre-upgrade hook.
    "helm.sh/hook-delete-policy": "before-hook-creation"
    "helm.sh/hook-weight": "0"
type: Opaque
data:
  tls.crt: {{ b64enc $cert.Cert }}
