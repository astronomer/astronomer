nodeSelector: {}
affinity: {}
tolerations: []

images:
  es:
    repository: astronomerinc/ap-elasticsearch
    tag: 7.7.1
    pullPolicy: IfNotPresent
  init:
    repository: astronomerinc/ap-base
    tag: 3.11.5-3
    pullPolicy: IfNotPresent
  curator:
    repository: astronomerinc/ap-curator
    tag: 3.11.5-4
    pullPolicy: IfNotPresent
  exporter:
    repository: astronomerinc/ap-elasticsearch-exporter
    tag: 1.1.0
    pullPolicy: IfNotPresent
  nginx:
    repository: astronomerinc/ap-nginx-es
    tag: 3.11.5-3
    pullPolicy: IfNotPresent

common:
  podAnnotations: {}
  serviceType: ClusterIP

  env:
    CLUSTER_NAME: "astronomer"
    HTTP_CORS_ENABLE: "true"
    HTTP_CORS_ALLOW_ORIGIN: "*"
    NUMBER_OF_MASTERS: "2"
    MAX_LOCAL_STORAGE_NODES: "1"
    SHARD_ALLOCATION_AWARENESS: ""
    SHARD_ALLOCATION_AWARENESS_ATTR: ""

    # Uncomment this if you get the "No up-and-running site-local (private)
    # addresses" error.
    # NETWORK_HOST: "_eth0_"

  # If enabled, then the data and master nodes will be StatefulSets with
  # associated persistent volume claims.
  persistence:
    enabled: true

    # The PVC storage class that backs the persistent volume claims. On AWS
    # "gp2" would be appropriate.
    # storageClassName: "standard"

  ports:
    http: 9200
    transport: 9300

# Client/ingest nodes can execute pre-processing pipelines, composed of
# one or more ingest processors. Depending on the type of operations performed
# by the ingest processors and the required resources, it may make sense to
# have dedicated ingest nodes, that will only perform this specific task.
client:
  podAnnotations: {}
  # It isn't common to need more than 2 client nodes.
  replicas: 2
  # This only applies when replicas > 3
  maxUnavailable: 25%
  antiAffinity: "soft"

  # The amount of RAM allocated to the JVM heap. This should be set to the
  # same value as client.resources.requests.memory, or you may see
  # OutOfMemoryErrors on startup.
  heapMemory: 256m

  resources:
    requests:
      memory: 256Mi

  env:
    NODE_DATA: "false"
    NODE_MASTER: "false"
    NODE_INGEST: "true"
    HTTP_ENABLE: "true"

# Data nodes hold the shards that contain the documents you have indexed. Data
# nodes handle data related operations like CRUD, search, and aggregations.
# These operations are I/O-, memory-, and CPU-intensive. It is important to
# monitor these resources and to add more data nodes if they are overloaded.
#
# The main benefit of having dedicated data nodes is the separation of the
# master and data roles.
data:
  podAnnotations: {}
  # This count will depend on your data and computation needs.
  replicas: 2
  antiAffinity: "soft"

  # The amount of RAM allocated to the JVM heap. This should be set to the
  # same value as data.resources.requests.memory, or you may see
  # OutOfMemoryErrors on startup.
  heapMemory: 256m

  resources:
    requests:
      memory: 256Mi

  env:
    NODE_DATA: "true"
    NODE_MASTER: "false"
    NODE_INGEST: "false"
    HTTP_ENABLE: "false"

  # Determines the properties of the persistent volume claim associated with a
  # data node StatefulSet that is created when the common.persistence.enabled
  # attribute is true.
  persistence:
    # This is a default value, and will not be sufficient in a production
    # system. You'll probably want to increase it.
    size: 50Gi

# The master node is responsible for lightweight cluster-wide actions such as
# creating or deleting an index, tracking which nodes are part of the
# cluster, and deciding which shards to allocate to which nodes. It is
# important for cluster health to have a stable master node.
master:
  podAnnotations: {}
  # Master replica count should be (#clients / 2) + 1, and generally at least 3.
  replicas: 3
  antiAffinity: "soft"

  # The amount of RAM allocated to the JVM heap. This should be set to the
  # same value as master.resources.requests.memory, or you may see
  # OutOfMemoryErrors on startup.
  heapMemory: 256m

  resources:
    requests:
      memory: 256Mi

  env:
    NODE_DATA: "false"
    NODE_MASTER: "true"
    NODE_INGEST: "false"
    HTTP_ENABLE: "false"

  # Determines the properties of the persistent volume claim associated with a
  # data node StatefulSet that is created when the common.stateful.enabled
  # attribute is true.
  persistence:
    # This is a default value, and will not be sufficient in a production
    # system. You'll probably want to increase it.
    size: 20Gi

curator:
  podAnnotations: {}
  enabled: true
  schedule: "0 1 * * *"

  # Allows modification of the default age-based filter. If you require more
  # sophisticated filtering, modify the action file specified in
  # templates/es-curator-config.yaml.
  age:
    timestring: "%Y.%m.%d"
    unit: "days"
    unit_count: 10

exporter:
  podAnnotations: {}
  # Number of exporter instances
  replicas: 1

  # Restart policy for all containers
  restartPolicy: Always

  resources: {}
  # requests:
  #   cpu: 100m
  #   memory: 128Mi
  # limits:
  #   cpu: 100m
  #   memory: 128Mi

  service:
    type: ClusterIP
    httpPort: 9108
    annotations: {}

  es:
    # Address (host and port) of the Elasticsearch node we should connect to.
    # uri: localhost:9200

    # Timeout for trying to get stats from Elasticsearch. (ex: 20s)
    timeout: 30s

  web:
    # Path under which to expose metrics.
    path: /metrics

# NGINX Elasticsearch values
nginx:
  replicas: 1
  podAnnotations: {}
  fullnameOverride: ~
  ingressClass: ~
  resources: {}
