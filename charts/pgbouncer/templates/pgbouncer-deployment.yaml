##########################
## Pgbouncer Deployment ##
##########################
{{- if .Values.global.pgbouncer.enabled }}
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ .Release.Name }}-pgbouncer
  labels:
    tier: astronomer
    component: pgbouncer
    release: {{ .Release.Name }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: {{ .Release.Service }}
spec:
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: {{ template "pgbouncer.name" . }}
      release: {{ .Release.Name }}
      component: pgbouncer
  template:
    metadata:
      labels:
        app: {{ template "pgbouncer.name" . }}
        chart: {{ template "pgbouncer.chart" . }}
        heritage: {{ .Release.Service | quote }}
        release: {{ .Release.Name }}
        component: pgbouncer
        version: {{ .Chart.Version }}
        {{- include "global.podLabels" . | nindent 8 }}
        tier: astronomer
        {{- range $key, $value :=  .Values.global.pgbouncer.extraLabels }}
        {{ $key | replace "-" "_" }}: {{ $value | quote }}
        {{- end }}
{{- if or .Values.global.podAnnotations  .Values.podAnnotations }}
      annotations:
{{- if .Values.global.podAnnotations }}
{{ toYaml .Values.global.podAnnotations | indent 8 }}
{{- end }}
{{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
{{- end }}
    spec:
      nodeSelector: {{ toYaml (default .Values.global.platformNodePool.nodeSelector .Values.nodeSelector) | nindent 8 }}
      securityContext: {{ toYaml .Values.podSecurityContext | nindent 8 }}
      affinity: {{ toYaml (default .Values.global.platformNodePool.affinity .Values.affinity) | nindent 8 }}
      tolerations: {{ toYaml (default .Values.global.platformNodePool.tolerations .Values.tolerations) | nindent 8 }}
      restartPolicy: Always
      serviceAccountName: {{ template "pgbouncer.serviceAccountName" . }}
      containers:
        - name: pgbouncer
          image: {{ template "pgbouncer.image" . }}
          securityContext: {{ toYaml .Values.securityContext| nindent 12 }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            {{- include "pgbouncer_environment" . | indent 12 }}
            {{- range $key, $value :=  .Values.env }}
            - name: {{ $key | replace "-" "_" }}
              value: {{ $value | quote }}
            {{- end }}
            {{- range $key, $value :=  .Values.global.pgbouncer.extraEnv }}
            - name: {{ $key | replace "-" "_" }}
              value: {{ $value | quote }}
            {{- end }}
          resources: {{ toYaml .Values.resources | nindent 12 }}
          ports:
            - name: pgbouncer
              containerPort: {{ .Values.internalPort }}
          {{- if .Values.livenessProbe }}
          livenessProbe: {{ tpl (toYaml .Values.livenessProbe) . | nindent 12 }}
          {{- else }}
          livenessProbe:
            tcpSocket:
              port: {{ .Values.internalPort }}
          {{- end }}
          {{- if .Values.readinessProbe }}
          readinessProbe: {{ tpl (toYaml .Values.readinessProbe) . | nindent 12 }}
          {{- else }}
          readinessProbe:
            tcpSocket:
              port: {{ .Values.internalPort }}
          {{- end }}
          lifecycle:
            preStop:
              exec:
                # Allow existing queries clients to complete within 120 seconds
                command: ["/bin/sh", "-c", "killall -INT pgbouncer && sleep 120"]
{{- end }}
