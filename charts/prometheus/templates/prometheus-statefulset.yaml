############################
## Prometheus StatefulSet ##
############################
{{- $useClusterRoles := and .Values.global.rbacEnabled .Values.global.clusterRoles (not (eq .Values.rbac.role.kind "Role") ) }}
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: {{ template "prometheus.fullname" . }}
  labels:
    tier: monitoring
    component: {{ template "prometheus.name" . }}
    chart: {{ template "prometheus.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  {{- if and .Values.persistence.enabled .Values.persistence.persistentVolumeClaimRetentionPolicy }}
  persistentVolumeClaimRetentionPolicy: {{- toYaml .Values.persistence.persistentVolumeClaimRetentionPolicy | nindent 4 }}
  {{ end }}
  replicas: {{ .Values.replicas }}
  serviceName: {{ template "prometheus.fullname" . }}
  selector:
    matchLabels:
      tier: monitoring
      component: {{ template "prometheus.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
{{- with .Values.podLabels }}
{{ toYaml . | indent 8 }}
{{- end }}
        tier: monitoring
        component: {{ template "prometheus.name" . }}
        release: {{ .Release.Name }}
        app: {{ template "prometheus.name" . }}
        version: {{ .Chart.Version }}
      annotations:
{{- if .Values.global.istio.enabled }}
        sidecar.istio.io/proxyCPU: "500m"
        sidecar.istio.io/proxyMemory: "400Mi"
{{- end }}
{{- if .Values.global.podAnnotations }}
{{ toYaml .Values.global.podAnnotations | indent 8 }}
{{- end }}
{{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
    spec:
      {{- if .Values.priorityClassName }}
      priorityClassName:  {{ .Values.priorityClassName  }}
      {{ end }}
      nodeSelector: {{ toYaml (default .Values.global.platformNodePool.nodeSelector .Values.nodeSelector) | nindent 8 }}
      affinity: {{ toYaml (default .Values.global.platformNodePool.affinity .Values.affinity) | nindent 8 }}
      tolerations: {{ toYaml (default .Values.global.platformNodePool.tolerations .Values.tolerations) | nindent 8 }}
      restartPolicy: Always
      serviceAccountName: {{ template "prometheus.serviceAccountName" . }}
      {{- include "prometheus.imagePullSecrets" . | nindent 6 }}
      containers:
      {{- if (eq .Values.global.plane.mode "data")}}
        - name: nginx-auth-sidecar
          image: {{ template "authSidecar.image" . }}
          imagePullPolicy: {{ .Values.global.authSidecar.pullPolicy }}
          env:
          - name: REGISTRY_AUTH_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ template "registry.authHeaderSecret" . }}
                key: authHeaders
          resources: {{ toYaml (.Values.federation.auth.resources | default .Values.global.authSidecar.resources) | nindent 12 }}
          readinessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.global.authSidecar.port }}
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.global.authSidecar.port }}
              scheme: HTTP
      {{- end }}
        {{- if .Values.global.authSidecar.enabled  }}
        - name: auth-proxy
          image: {{ include "authSidecar.image" . }}
          securityContext:
            {{ template "prometheus.securityContext" . }}
          imagePullPolicy: {{ .Values.global.authSidecar.pullPolicy }}
          {{- if .Values.global.authSidecar.resources }}
          resources: {{- toYaml .Values.global.authSidecar.resources | nindent 12 }}
          {{- end }}
          ports:
          - containerPort: {{ .Values.global.authSidecar.port }}
            name: auth-proxy
            protocol: TCP
          {{- if .Values.global.authSidecar.readinessProbe }}
          readinessProbe: {{ tpl (toYaml .Values.global.authSidecar.readinessProbe) . | nindent 12 }}
          {{- else }}
          readinessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.global.authSidecar.port }}
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
          {{- end }}
          {{-  if .Values.global.authSidecar.livenessProbe }}
          livenessProbe: {{ tpl (toYaml .Values.global.authSidecar.livenessProbe) . | nindent 12 }}
          {{- else }}
          livenessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.global.authSidecar.port }}
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
          {{- end }}
          volumeMounts:
          - mountPath: /etc/nginx/conf.d/
            name: prometheus-sidecar-conf
        {{- end }}
        - name: configmap-reloader
          args:
            - --webhook-url=http://localhost:9090/-/reload
            - --volume-dir=/etc/prometheus/alerts.d
            - --volume-dir=/etc/prometheus/config
          image: {{ include "configReloader.image" . }}
          imagePullPolicy: {{ .Values.images.prometheus.pullPolicy }}
          securityContext:
            readOnlyRootFilesystem: true
            {{ template "prometheus.securityContext" . }}
          resources: {{ toYaml .Values.configMapReloader.resources | nindent 12 }}
          {{- if .Values.configMapReloader.livenessProbe }}
          livenessProbe: {{ tpl (toYaml .Values.configMapReloader.livenessProbe) . | nindent 12 }}
          {{- end }}
          {{- if .Values.configMapReloader.readinessProbe }}
          readinessProbe: {{ tpl (toYaml .Values.configMapReloader.readinessProbe) . | nindent 12 }}
          {{- end }}
          volumeMounts:
          - name: alert-volume
            mountPath: /etc/prometheus/alerts.d
          - name: prometheus-config-volume
            mountPath: /etc/prometheus/config
        - name: filesd-reloader
          image: {{ include "filesdReloader.image" . }}
          imagePullPolicy: {{ .Values.images.filesdReloader.pullPolicy }}
          securityContext:
            readOnlyRootFilesystem: true
          resources: {{ toYaml .Values.filesdReloader.resources | nindent 12 }}
          {{- if .Values.filesdReloader.livenessProbe }}
          livenessProbe: {{ tpl (toYaml .Values.filesdReloader.livenessProbe) . | nindent 12 }}
          {{- end }}
          {{- if .Values.filesdReloader.readinessProbe }}
          readinessProbe: {{ tpl (toYaml .Values.filesdReloader.readinessProbe) . | nindent 12 }}
          {{- end }}
          env:
            - name: DATABASE_URL
              valueFrom:
                secretKeyRef:
                  name: astronomer-bootstrap
                  key: connection
            - name: DATABASE_SCHEMA_NAME
              value: "houston$default"
            - name: CLUSTER_TABLE_NAME
              value: Cluster
            - name: DEPLOYMENT_TABLE_NAME
              value: Deployment
            - name: DATABASE_NAME
              value: {{ .Release.Name }}_houston
            - name: FILESD_FILE_PATH
              value: /prometheusreloader/airflow
            {{- if not $useClusterRoles }}
            - name: ENABLE_DEPLOYMENT_SCRAPING
              value: "False"
            {{- end }}
            - name: ENABLE_CLUSTER_SCRAPING
              value: "True"
{{- if .Values.filesdReloader.extraEnv }}
{{ toYaml .Values.filesdReloader.extraEnv | indent 12 }}
{{- end }}
          volumeMounts:
          - mountPath: /prometheusreloader/airflow
            name: filesd
        - name: prometheus
          image: {{ include "prometheus.image" . }}
          {{- if or (eq .Values.global.plane.mode "control") (eq .Values.global.plane.mode "unified") }}
          env:
            - name: FEDERATION_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ template "prometheus.federationAuthSecret" . }}
                  key: token
          {{- end }}
          securityContext:
            readOnlyRootFilesystem: true
            {{ template "prometheus.securityContext" . }}
          imagePullPolicy: {{ .Values.images.prometheus.pullPolicy }}
          resources: {{ toYaml .Values.resources | nindent 12 }}
          args:
            - "--config.file=/etc/prometheus/config/prometheus.yaml"
            - "--storage.tsdb.path={{ .Values.dataDir }}"
            - "--storage.tsdb.retention.time={{ .Values.retention }}"
            {{- if .Values.enableLifecycle }}
            - "--web.enable-lifecycle"
            {{- end }}
            {{- if .Values.global.baseDomain }}
            - "--web.external-url=https://prometheus.{{ .Values.global.baseDomain }}"
            {{- end }}
            {{- range .Values.extraFlags }}
            - {{ . }}
            {{- end }}
          volumeMounts:
          {{- if or (eq .Values.global.plane.mode "control") (eq .Values.global.plane.mode "unified") }}
            - name: federation-auth
              mountPath: /etc/prometheus/federation-auth
              readOnly: true
          {{- end }}
            - name: prometheus-config-volume
              mountPath: /etc/prometheus/config
            - name: alert-volume
              mountPath: /etc/prometheus/alerts.d
            - name: data
              mountPath: {{ .Values.dataDir }}
            - name: filesd
              mountPath: /prometheusreloader/airflow
          ports:
            - name: prometheus-data
              containerPort: {{ .Values.ports.http }}
          {{- if .Values.livenessProbe }}
          livenessProbe: {{ tpl (toYaml .Values.livenessProbe) . | nindent 12 }}
          {{- else }}
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: {{ .Values.ports.http }}
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 3
            timeoutSeconds: 1
          {{- end }}
          {{- if .Values.readinessProbe }}
          readinessProbe: {{ tpl (toYaml .Values.readinessProbe) . | nindent 12 }}
          {{- else }}
          readinessProbe:
            httpGet:
              path: /-/ready
              port: {{ .Values.ports.http }}
            initialDelaySeconds: 10
            periodSeconds: 5
            failureThreshold: 3
            timeoutSeconds: 1
          {{- end }}
{{- if eq .Values.global.openshiftEnabled false }}
      securityContext: {{ toYaml .Values.podSecurityContext| nindent 8 }}
{{- end }}
      volumes:
        {{- if .Values.global.authSidecar.enabled }}
        - name: prometheus-sidecar-conf
          configMap:
            name: {{ template "prometheus.fullname" . }}-nginx-conf
        {{- end }}
        {{- if or (eq .Values.global.plane.mode "control") (eq .Values.global.plane.mode "unified") }}
        - name: federation-auth
          secret:
            secretName: {{ template "prometheus.federationAuthSecret" . }}
            items:
            - key: token
              path: federation-token
        {{- end }}
        - name: prometheus-config-volume
          configMap:
            name: {{ template "prometheus.fullname" . }}-config
            items:
              - key: config
                path: prometheus.yaml
        - name: alert-volume
          configMap:
            name: {{ template "prometheus.fullname" . }}-alerts
            items:
              - key: alerts
                path: alerts.yaml
        - name: filesd
          emptyDir: {}
  {{- if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
  {{- else }}
  volumeClaimTemplates:
    - metadata:
        name: data
        {{- if .Values.persistence.annotations }}
        annotations:
          {{- toYaml .Values.persistence.annotations | nindent 10 }}
        {{- end }}
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
        {{ include "prometheus.storageClass" . }}
  {{- end }}
