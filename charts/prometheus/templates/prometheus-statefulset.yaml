################################
## Prometheus StatefulSet
#################################
kind: StatefulSet
apiVersion: {{ template "apiVersion.StatefulSet" . }}
metadata:
  name: {{ template "prometheus.fullname" . }}
  labels:
    tier: monitoring
    component: {{ template "prometheus.name" . }}
    chart: {{ template "prometheus.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicas }}
  serviceName: {{ template "prometheus.fullname" . }}
  selector:
    matchLabels:
      tier: monitoring
      component: {{ template "prometheus.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
{{- with .Values.podLabels }}
{{ toYaml . | indent 8 }}
{{- end }}
        tier: monitoring
        component: {{ template "prometheus.name" . }}
        release: {{ .Release.Name }}
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/prometheus-config-configmap.yaml") . | sha256sum }}
        checksum/alerts: {{ include (print $.Template.BasePath "/prometheus-alerts-configmap.yaml") . | sha256sum }}
{{- if .Values.global.istio.enabled }}
        sidecar.istio.io/proxyCPU: "500m"
        sidecar.istio.io/proxyMemory: "400Mi"
{{- end }}
    spec:
      nodeSelector:
{{ toYaml (default .Values.global.platformNodePool.nodeSelector .Values.nodeSelector) | indent 8 }}
      affinity:
{{ toYaml (default .Values.global.platformNodePool.affinity .Values.affinity) | indent 8 }}
      tolerations:
{{ toYaml (default .Values.global.platformNodePool.tolerations .Values.tolerations) | indent 8 }}
      restartPolicy: Always
      serviceAccountName: {{ template "prometheus.fullname" . }}
      initContainers:
        - name: init
          image: {{ include "prometheus.init.image" . }}
          imagePullPolicy: {{ .Values.images.init.pullPolicy }}
          command: ["chown", "-R", "65534:65534", "{{ .Values.dataDir }}"]
          volumeMounts:
            - name: data
              mountPath: "{{ .Values.dataDir }}"
      containers:
        - name: prometheus
          image: {{ include "prometheus.image" . }}
          imagePullPolicy: {{ .Values.images.prometheus.pullPolicy }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
          args:
            - "--config.file=/etc/prometheus/config/prometheus.yaml"
            - "--storage.tsdb.path={{ .Values.dataDir }}"
            - "--storage.tsdb.retention={{ .Values.retention }}"
            {{- if .Values.enableLifecycle }}
            - "--web.enable-lifecycle"
            {{- end }}
            {{- if .Values.global.baseDomain }}
            - "--web.external-url=https://prometheus.{{ .Values.global.baseDomain }}"
            {{- end }}
          volumeMounts:
            - name: prometheus-config-volume
              mountPath: /etc/prometheus/config
            - name: alert-volume
              mountPath: /etc/prometheus/alerts.d
            - name: data
              mountPath: {{ .Values.dataDir }}
          ports:
            - name: prometheus-data
              containerPort: {{ .Values.ports.http }}
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: {{ .Values.ports.http }}
            initialDelaySeconds: 10
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /-/ready
              port: {{ .Values.ports.http }}
            initialDelaySeconds: 10
            periodSeconds: 5
      volumes:
        - name: prometheus-config-volume
          configMap:
            name: {{ template "prometheus.fullname" . }}-config
            items:
              - key: prometheus.yaml
                path: prometheus.yaml
        - name: alert-volume
          configMap:
            name: {{ template "prometheus.fullname" . }}-alerts
            items:
              - key: alerts.yaml
                path: alerts.yaml
  {{- if not .Values.persistence.enabled }}
        - name: data
          emptyDir: {}
  {{- else }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        resources:
          requests:
            storage: {{ .Values.persistence.size }}
      {{- if .Values.persistence.storageClassName }}
        storageClassName: {{ .Values.persistence.storageClassName }}
      {{- end }}
  {{- end }}
