##########################################
## Prometheus Federation Auth Configmap ##
##########################################
{{- if or (eq .Values.global.plane.mode "data") (eq .Values.global.plane.mode "unified") }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "prometheus.fullname" . }}-federation-auth-config
  labels:
    tier: monitoring
    component: {{ template "prometheus.name" . }}-federation-auth
    chart: {{ template "prometheus.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  nginx.conf: |
    pid /tmp/nginx.pid;
    worker_processes 1;
    events {
        worker_connections 1024;
    }
    env REGISTRY_AUTH_TOKEN;
    http {
        lua_package_path "/usr/local/openresty/lualib/?.lua;;";
        lua_shared_dict federation_auth_cache 10m;

        # Upstream to Prometheus service
        upstream prometheus_backend {
            server {{ template "prometheus.fullname" . }}.{{ .Release.Namespace }}:{{ .Values.ports.http }};
            keepalive 15;
        }

        server {
            listen {{ .Values.global.authSidecar.port }};
            server_name _;

            # Disable Nginx Server version
            server_tokens off;

            # Proxy settings
            proxy_buffering off;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Federation endpoint with auth and proxy
            location = /federate {
                auth_request /auth;

                # Remove the Authorization header before proxying to Prometheus
                proxy_set_header Authorization "";

                # Proxy to Prometheus backend
                proxy_pass http://prometheus_backend/federate;
                proxy_read_timeout 300s;
                proxy_connect_timeout 75s;

                # Handle large responses
                proxy_buffering off;
                proxy_buffer_size 4k;
            }

            # Auth endpoint for external ingress controllers and federation tokens
            location = /auth {
                internal;
                content_by_lua_block {
                    {{- if .Values.global.authSidecar.enabled }}
                    -- Check for authsidecar authentication first
                    local authsidecar_user = ngx.var.http_x_forwarded_user or 
                                            ngx.var.http_x_auth_user or
                                            ngx.var.http_x_remote_user
                    
                    local authsidecar_session = ngx.var.cookie_session or
                                               ngx.var.cookie_auth_session or
                                               ngx.var.cookie_astronomer_session
                    
                    local authsidecar_groups = ngx.var.http_x_forwarded_groups or
                                              ngx.var.http_x_auth_groups
                    
                    -- Check for any authsidecar authentication indicators
                    if authsidecar_user or authsidecar_session then
                        ngx.log(ngx.INFO, "AuthSidecar authentication detected for user: ", 
                                authsidecar_user or "session-based")
                        if authsidecar_groups then
                            ngx.log(ngx.INFO, "AuthSidecar groups: ", authsidecar_groups)
                        end
                        return -- Allow access when authsidecar is authenticated
                    end
                    
                    -- Check for authsidecar JWT tokens
                    local auth_header = ngx.var.http_authorization
                    if auth_header then
                        local jwt_token = auth_header:match("^Bearer%s+(.+)$")
                        if jwt_token and (jwt_token:match("^ey[A-Za-z0-9%-_]+%.") or 
                                         string.len(jwt_token) > 100) then
                            -- This looks like a JWT token from authsidecar
                            ngx.log(ngx.INFO, "AuthSidecar JWT token detected, allowing access")
                            return
                        end
                    end
                    
                    ngx.log(ngx.INFO, "No valid authsidecar authentication found, checking federation token")
                    {{- end }}
                    
                    -- Fall back to federation token authentication
                    local auth_header = ngx.var.http_authorization
                    local registry_auth_token = os.getenv("REGISTRY_AUTH_TOKEN")

                    if not auth_header then
                        ngx.log(ngx.WARN, "Federation auth: Missing Authorization header")
                        ngx.status = 401
                        ngx.header["X-Auth-Error"] = "Missing Authorization header"
                        {{- if .Values.global.authSidecar.enabled }}
                        ngx.header["X-Auth-Error"] = "Missing Authorization header. Provide either valid authsidecar authentication or federation token."
                        {{- end }}
                        ngx.exit(401)
                    end

                    -- Extract token
                    local provided_token = auth_header:match("^Bearer%s+(.+)$") or
                                          auth_header:match("^%[(.+)%]$") or
                                          auth_header

                    if not provided_token then
                        ngx.log(ngx.WARN, "Federation auth: Invalid Authorization format")
                        ngx.status = 401
                        ngx.header["X-Auth-Error"] = "Invalid Authorization format"
                        ngx.exit(401)
                    end

                    -- Validate against federation token
                    if provided_token ~= registry_auth_token then
                        ngx.log(ngx.WARN, "Federation auth failed for token prefix: ",
                                string.sub(provided_token, 1, 8))
                        ngx.status = 403
                        {{- if .Values.global.authSidecar.enabled }}
                        ngx.header["X-Auth-Error"] = "Invalid federation token. Ensure you're authenticated via authsidecar or provide a valid federation token."
                        {{- else }}
                        ngx.header["X-Auth-Error"] = "Invalid federation token"
                        {{- end }}
                        ngx.exit(403)
                    end

                    ngx.log(ngx.INFO, "Federation token authentication successful, proxying to Prometheus")
                }
            }

            # Health check endpoint
            location /healthz {
                content_by_lua_block {
                  ngx.status = 200
                  ngx.say("OK")
                  return ngx.exit(200)
                }
            }
        }
    }
{{- end }}