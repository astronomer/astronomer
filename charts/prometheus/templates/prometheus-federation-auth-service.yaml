########################################
## Prometheus Federation Auth Service ##
########################################
{{- if or (eq .Values.global.plane.mode "data") (eq .Values.global.plane.mode "unified") }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "prometheus.fullname" . }}-federation-auth-config
  labels:
    tier: monitoring
    component: {{ template "prometheus.name" . }}-federation-auth
    chart: {{ template "prometheus.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  nginx.conf: |
    events {
        worker_connections 1024;
    }

    http {
        lua_package_path "/usr/local/openresty/lualib/?.lua;;";
        lua_shared_dict federation_auth_cache 10m;

        env REGISTRY_AUTH_TOKEN;

        init_by_lua_block {
            local resty_sha256 = require "resty.sha256"
            local str = require "resty.string"

            local registry_token = os.getenv("REGISTRY_AUTH_TOKEN") or ""
            if registry_token == "" then
                ngx.log(ngx.ERR, "REGISTRY_AUTH_TOKEN environment variable not set")
                return
            end

            -- Generate federation token with salt
            local sha256 = resty_sha256:new()
            sha256:update(registry_token)
            sha256:update("prometheus-federation-salt-2025")
            federation_auth_token = str.to_hex(sha256:final())

            ngx.log(ngx.INFO, "Federation auth initialized for release: {{ .Release.Name }}")
        }

        server {
            listen {{ .Values.global.authSidecar.port | default 80 }};
            server_name _;

            # Disable Nginx Server version (following existing pattern)
            server_tokens off;

            # Auth endpoint for ingress controller
            location /auth {
                access_by_lua_block {
                    local auth_header = ngx.var.http_authorization

                    if not auth_header then
                        ngx.log(ngx.WARN, "Federation auth: Missing Authorization header")
                        ngx.status = 401
                        ngx.header["X-Auth-Error"] = "Missing Authorization header"
                        ngx.exit(401)
                    end

                    -- Extract token
                    local provided_token = auth_header:match("^Bearer%s+(.+)$") or
                                          auth_header:match("^%[(.+)%]$") or
                                          auth_header

                    if not provided_token then
                        ngx.log(ngx.WARN, "Federation auth: Invalid Authorization format")
                        ngx.status = 401
                        ngx.header["X-Auth-Error"] = "Invalid Authorization format"
                        ngx.exit(401)
                    end

                    -- Validate against federation token
                    if provided_token ~= federation_auth_token then
                        ngx.log(ngx.WARN, "Federation auth failed for token prefix: ",
                                string.sub(provided_token, 1, 8))
                        ngx.status = 403
                        ngx.header["X-Auth-Error"] = "Invalid federation token"
                        ngx.exit(403)
                    end

                    -- Set response headers for ingress (following Astronomer patterns)
                    ngx.header["X-Auth-User"] = "federation-client"
                    ngx.header["X-Auth-Token-Prefix"] = string.sub(provided_token, 1, 8)

                    ngx.log(ngx.INFO, "Federation auth successful")
                    ngx.status = 200
                }
            }

            # Health check endpoint
            location /healthz {
                return 200 "OK";
            }

            # Default nginx settings (following existing pattern)
            {{ .Values.global.default_nginx_settings | default "" }}
            {{- if .Values.global.authSidecar.default_nginx_settings }}
{{ .Values.global.authSidecar.default_nginx_settings | indent 12 }}
            {{- end }}
        }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "prometheus.fullname" . }}-federation-auth
  labels:
    tier: monitoring
    component: {{ template "prometheus.name" . }}-federation-auth
    chart: {{ template "prometheus.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    plane: {{ .Values.global.plane.mode }}
spec:
  replicas: {{ .Values.federation.auth.replicas | default 2 }}
  selector:
    matchLabels:
      component: {{ template "prometheus.name" . }}-federation-auth
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        tier: monitoring
        component: {{ template "prometheus.name" . }}-federation-auth
        release: {{ .Release.Name }}
        plane: {{ .Values.global.plane.mode }}
        app: {{ template "prometheus.name" . }}-federation-auth
        version: {{ .Chart.Version }}
      annotations:
{{- if .Values.global.podAnnotations }}
{{ toYaml .Values.global.podAnnotations | indent 8 }}
{{- end }}
{{- if .Values.podannotations }}
{{ toYaml .Values.podannotations | indent 8 }}
{{- end }}
    spec:
      {{- if .Values.global.platformNodePool }}
      nodeSelector:
{{ toYaml .Values.global.platformNodePool.nodeSelector | indent 8 }}
      affinity:
{{ toYaml .Values.global.platformNodePool.affinity | indent 8 }}
      tolerations:
{{ toYaml .Values.global.platformNodePool.tolerations | indent 8 }}
      {{- end }}
      {{- include "prometheus.imagePullSecrets" . | nindent 6 }}
      containers:
      - name: federation-auth
        image: {{ template "authSidecar.image" . }}
        ports:
        - containerPort: {{ .Values.global.authSidecar.port }}
          name: http
        env:
        - name: REGISTRY_AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              name: astronomer-registry-auth-key
              key: token
        volumeMounts:
        - name: config
          mountPath: /usr/local/openresty/nginx/conf/nginx.conf
          subPath: nginx.conf
        livenessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.global.authSidecar.port | default 80 }}
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /healthz
            port: {{ .Values.global.authSidecar.port | default 80 }}
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
{{ toYaml (.Values.federation.auth.resources | default .Values.global.authSidecar.resources) | indent 10 }}
        {{- if .Values.global.authSidecar.securityContext }}
        securityContext:
{{ toYaml .Values.global.authSidecar.securityContext | indent 10 }}
        {{- end }}
      volumes:
      - name: config
        configMap:
          name: {{ template "prometheus.fullname" . }}-federation-auth-config
      {{- if .Values.global.authSidecar.podSecurityContext }}
      securityContext:
{{ toYaml .Values.global.authSidecar.podSecurityContext | indent 8 }}
      {{- end }}

---
apiVersion: v1
kind: Service
metadata:
  name: {{ template "prometheus.fullname" . }}-federation-auth
  labels:
    tier: monitoring
    component: {{ template "prometheus.name" . }}-federation-auth
    chart: {{ template "prometheus.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    component: {{ template "prometheus.name" . }}-federation-auth
    release: {{ .Release.Name }}
  ports:
  - name: http
    port: {{ .Values.global.authSidecar.port | default 80 }}
    targetPort: {{ .Values.global.authSidecar.port | default 80 }}
    appProtocol: tcp
  type: ClusterIP

{{- end }}
