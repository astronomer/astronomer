###################################
## Elasticsearch Proxy ConfigMap ##
###################################
kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ template "external-es-proxy.fullname" . }}
  labels:
    tier: external-logging
    component: {{ template "external-es-proxy.name" . }}
    chart: {{ template "external-es-proxy.chart" . }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
data:
  nginx.conf: |
    worker_processes 1;
    pid /tmp/nginx.pid;
    events { worker_connections 1024; }
    error_log /dev/stdout info;
    env ES_SECRET;
    env ES_SECRET_NAME;

    http {
      {{- if .Values.authCache.enabled }}
      log_format cache_status '$remote_addr - $remote_user [$time_local] '
                              '"$request" $status $body_bytes_sent '
                              '"$http_referer" "$http_user_agent" '
                              'cache=$auth_cache_status';
      access_log /dev/stdout cache_status;
      {{- else }}
      access_log /dev/stdout;
      {{- end }}
      client_max_body_size 1024M;
      {{- if .Values.authCache.enabled }}

      proxy_cache_path /tmp/nginx-auth-cache levels={{ .Values.authCache.levels }} keys_zone={{ .Values.authCache.keysZone }} max_size={{ .Values.authCache.maxSize }} inactive={{ .Values.authCache.inactive }};
      {{- end }}

      server {
        listen {{ .Values.service.securehttp }};
        auth_request /auth;
        {{- if .Values.authCache.enabled }}
        auth_request_set $auth_cache_status $upstream_cache_status;
        {{- end }}
        proxy_http_version 1.1;
        proxy_set_header Connection "Keep-Alive";
        proxy_set_header Proxy-Connection "Keep-Alive";

        # The following "location" rules limit airflow interactions to only their indices. Any further
        # additions should follow this pattern.
        location ~* /_count$ {
          rewrite /_count(.*) /{{ include "logging.indexNamePrefix" . }}.$remote_user.*/_count$1 break;
          {{- include "external-es-proxy-nginx-location-common" . | indent 10 }}
        }

        location ~* /_bulk$ {
          rewrite /_bulk(.*) /{{ include "logging.indexNamePrefix" . }}.$remote_user.*/_bulk$1 break;
          {{- include "external-es-proxy-nginx-location-common" . | indent 10 }}
        }

        location ~* /_search$ {
          # This combined with disabling explicit index searching downstream
          # prevents any deployment from being able to query any other indexes.
          rewrite /_search(.*) /{{ include "logging.indexNamePrefix" . }}.$remote_user.*/_search$1 break;
          {{- include "external-es-proxy-nginx-location-common" . | indent 10 }}
        }

        location = /auth {
          internal;
          {{- if .Values.authCache.enabled }}
          proxy_cache auth_cache;
          proxy_cache_key "$http_authorization";
          proxy_cache_valid 200 {{ .Values.authCache.validSuccess }};
          proxy_cache_valid 401 403 {{ .Values.authCache.validFailure }};
          proxy_ignore_headers Cache-Control Expires;
          add_header X-Auth-Cache-Status $upstream_cache_status always;
          {{- end }}
          proxy_pass http://{{ .Release.Name }}-houston.{{ .Release.Namespace }}:8871/v1/elasticsearch;
          proxy_pass_request_body off;
          proxy_set_header Content-Length "";
          proxy_set_header X-Original-URI $request_uri;
        }

        location = /_cluster/state/version {
          {{- include "external-es-proxy-nginx-location-common" . | indent 10 }}
        }

        location = /_cluster/health {
          {{- include "external-es-proxy-nginx-location-common" . | indent 10 }}
        }

      }
      server {
        listen {{ .Values.service.http }};
        proxy_http_version 1.1;
        proxy_set_header Connection "Keep-Alive";
        proxy_set_header Proxy-Connection "Keep-Alive";

        location ~ ^/ {
          {{- include "external-es-proxy-nginx-location-common" . | indent 10 }}
        }
      }
    }
