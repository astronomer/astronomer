{{- if .Values.replication.enabled }}
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: "{{ template "postgresql.fullname" . }}-slave"
  labels:
    app: {{ template "postgresql.name" . }}
    chart: {{ template "postgresql.chart" . }}
    release: {{ .Release.Name | quote }}
    heritage: {{ .Release.Service | quote }}
spec:
  {{- if and .Values.persistence.enabled .Values.persistence.persistentVolumeClaimRetentionPolicy }}
  persistentVolumeClaimRetentionPolicy: {{- toYaml .Values.persistence.persistentVolumeClaimRetentionPolicy | nindent 4 }}
  {{ end }}
  serviceName: {{ template "postgresql.fullname" . }}-headless
  replicas: {{ .Values.replication.slaveReplicas }}
  selector:
    matchLabels:
      app: {{ template "postgresql.name" . }}
      release: {{ .Release.Name | quote }}
      role: slave
  template:
    metadata:
      name: {{ template "postgresql.fullname" . }}
      labels:
        app: {{ template "postgresql.name" . }}
        chart: {{ template "postgresql.chart" . }}
        component: postgresql
        heritage: {{ .Release.Service | quote }}
        release: {{ .Release.Name | quote }}
        role: slave
        tier: astronomer
        version: {{ .Chart.Version }}
        {{- include "global.podLabels" . | nindent 8 }}
{{- with .Values.slave.podLabels }}
{{ toYaml . | indent 8 }}
{{- end }}
{{- if or .Values.global.podAnnotations .Values.master.podAnnotations }}
      annotations:
{{- if .Values.global.podAnnotations }}
{{ toYaml .Values.global.podAnnotations | indent 8 }}
{{- end }}
{{- with .Values.slave.podAnnotations }}
{{ toYaml . | indent 8 }}
{{- end }}
{{- end }}
    spec:
      {{- if .Values.schedulerName }}
      schedulerName: "{{ .Values.schedulerName }}"
      {{- end }}
{{- include "postgresql.imagePullSecrets" . | indent 6 }}
      nodeSelector: {{ toYaml (default .Values.global.platformNodePool.nodeSelector .Values.slave.nodeSelector) | nindent 8 }}
      affinity: {{ toYaml (default .Values.global.platformNodePool.affinity .Values.slave.affinity) | nindent 8 }}
      tolerations: {{ toYaml (default .Values.global.platformNodePool.tolerations .Values.slave.tolerations) | nindent 8 }}
      {{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- end }}
      {{- if .Values.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ template "postgresql.serviceAccountName" . }}
      {{- if and .Values.volumePermissions.enabled .Values.persistence.enabled }}
      initContainers:
      - name: init-chmod-data
        image: {{ template "postgresql.volumePermissions.image" . }}
        imagePullPolicy: "{{ .Values.volumePermissions.image.pullPolicy }}"
        resources:
{{ toYaml .Values.resources | indent 10 }}
        command:
          - sh
          - -c
          - |
            mkdir -p {{ .Values.persistence.mountPath }}/data
            chmod 700 {{ .Values.persistence.mountPath }}/data
            find {{ .Values.persistence.mountPath }} -mindepth 0 -maxdepth 1 -not -name ".snapshot" -not -name "lost+found" | \
              xargs chown -R {{ .Values.securityContext.runAsUser }}:{{ .Values.securityContext.fsGroup }}
        securityContext:
          runAsUser: {{ .Values.volumePermissions.securityContext.runAsUser }}
          runAsNonRoot: {{ .Values.securityContext.runAsNonRoot }}
        volumeMounts:
        - name: data
          mountPath: {{ .Values.persistence.mountPath }}
          subPath: {{ .Values.persistence.subPath }}
      {{- end }}
      containers:
      - name: {{ template "postgresql.fullname" . }}
        image: {{ template "postgresql.image" . }}
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        resources:
{{ toYaml .Values.resources | indent 10 }}
        {{- if .Values.securityContext.enabled }}
        securityContext:
          runAsUser: {{ .Values.securityContext.runAsUser }}
          runAsNonRoot: {{ .Values.securityContext.runAsNonRoot }}
        {{- end }}
        env:
        - name: BITNAMI_DEBUG
          value: {{ ternary "true" "false" .Values.image.debug | quote }}
        - name: POSTGRESQL_VOLUME_DIR
          value: "{{ .Values.persistence.mountPath }}"
        - name: POSTGRESQL_PORT_NUMBER
          value: "{{ template "postgresql.port" . }}"
        {{- if .Values.persistence.mountPath }}
        - name: PGDATA
          value: {{ .Values.postgresqlDataDir | quote }}
        {{- end }}
        - name: POSTGRES_REPLICATION_MODE
          value: "slave"
        - name: POSTGRES_REPLICATION_USER
          value: {{ include "postgresql.replication.username" . | quote }}
        {{- if .Values.usePasswordFile }}
        - name: POSTGRES_REPLICATION_PASSWORD_FILE
          value: "/opt/bitnami/postgresql/secrets/postgresql-replication-password"
        {{- else }}
        - name: POSTGRES_REPLICATION_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "postgresql.secretName" . }}
              key: postgresql-replication-password
        {{- end }}
        - name: POSTGRES_CLUSTER_APP_NAME
          value: {{ .Values.replication.applicationName }}
        - name: POSTGRES_MASTER_HOST
          value: {{ template "postgresql.fullname" . }}
        - name: POSTGRES_MASTER_PORT_NUMBER
          value: {{ include "postgresql.port" . | quote }}
        {{- if .Values.usePasswordFile }}
        - name: POSTGRES_PASSWORD_FILE
          value: "/opt/bitnami/postgresql/secrets/postgresql-password"
        {{- else }}
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "postgresql.secretName" . }}
              key: postgresql-password
        {{- end }}
        ports:
        - name: postgresql
          containerPort: {{ template "postgresql.port" . }}
        {{- if .Values.livenessProbe }}
        livenessProbe: {{ tpl (toYaml .Values.livenessProbe) . | nindent 10 }}
        {{- else }}
        livenessProbe:
          exec:
            command:
            - sh
            - -c
           {{- if (include "postgresql.database" .) }}
            - exec pg_isready -U {{ include "postgresql.username" . | quote }} -d {{ (include "postgresql.database" .) | quote }} -h 127.0.0.1 -p {{ template "postgresql.port" . }}
           {{- else }}
            - exec pg_isready -U {{ include "postgresql.username" . | quote }} -h 127.0.0.1 -p {{ template "postgresql.port" . }}
           {{- end }}
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
          successThreshold: 1
        {{- end }}
        {{- if .Values.readinessProbe }}
        readinessProbe: {{ tpl (toYaml .Values.readinessProbe) . | nindent 10 }}
        {{- else }}
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - -e
            {{- include "postgresql.readinessProbeCommand" . | nindent 12 }}
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
          successThreshold: 1
        {{- end }}
        volumeMounts:
        {{- if .Values.usePasswordFile }}
        - name: postgresql-password
          mountPath: /opt/bitnami/postgresql/secrets/
        {{- end }}
        {{- if .Values.persistence.enabled }}
        - name: data
          mountPath: {{ .Values.persistence.mountPath }}
          subPath: {{ .Values.persistence.subPath }}
        {{ end }}
        {{- if or (.Files.Glob "files/conf.d/*.conf") .Values.postgresqlExtendedConf .Values.extendedConfConfigMap }}
        - name: postgresql-extended-config
          mountPath: /bitnami/postgresql/conf/conf.d/
        {{- end }}
        {{- if or (.Files.Glob "files/postgresql.conf") (.Files.Glob "files/pg_hba.conf") .Values.postgresqlConfiguration .Values.pgHbaConfiguration .Values.configurationConfigMap }}
        - name: postgresql-config
          mountPath: /bitnami/postgresql/conf
        {{- end }}
        {{- if .Values.slave.extraVolumeMounts }}
        {{- toYaml .Values.slave.extraVolumeMounts | nindent 8 }}
        {{- end }}
      volumes:
      {{- if .Values.usePasswordFile }}
      - name: postgresql-password
        secret:
          secretName: {{ template "postgresql.secretName" . }}
      {{- end }}
      {{- if or (.Files.Glob "files/postgresql.conf") (.Files.Glob "files/pg_hba.conf") .Values.postgresqlConfiguration .Values.pgHbaConfiguration .Values.configurationConfigMap}}
      - name: postgresql-config
        configMap:
          name: {{ template "postgresql.configurationCM" . }}
      {{- end }}
      {{- if or (.Files.Glob "files/conf.d/*.conf") .Values.postgresqlExtendedConf .Values.extendedConfConfigMap }}
      - name: postgresql-extended-config
        configMap:
          name: {{ template "postgresql.extendedConfigurationCM" . }}
      {{- end }}
      {{- if not .Values.persistence.enabled }}
      - name: data
        emptyDir: {}
      {{- end }}
      {{- if .Values.slave.extraVolumes }}
      {{- toYaml .Values.slave.extraVolumes | nindent 6}}
      {{- end }}
  updateStrategy:
    type: {{ .Values.updateStrategy.type }}
    {{- if (eq "Recreate" .Values.updateStrategy.type) }}
    rollingUpdate: null
    {{- end }}
{{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
      {{- with .Values.persistence.annotations }}
        annotations:
        {{- range $key, $value := . }}
          {{ $key }}: {{ $value }}
        {{- end }}
      {{- end }}
      spec:
        accessModes:
        {{- range .Values.persistence.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
        {{ include "postgresql.storageClass" . }}
{{- end }}
{{- end }}
