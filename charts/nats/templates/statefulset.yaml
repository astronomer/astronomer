---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "nats.name" . }}
  labels:
    app: {{ template "nats.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
  {{ if .Values.global.enableArgoCDAnnotation }}
  annotations:
    argocd.argoproj.io/sync-wave: "-1"
  {{- end }}
spec:
  selector:
    matchLabels:
      app: {{ template "nats.name" . }}
  {{- if .Values.cluster.enabled }}
  replicas: {{ .Values.global.nats.replicas }}
  {{- else }}
  replicas: 1
  {{- end }}
  serviceName: {{ template "nats.name" . }}
  template:
    metadata:
      annotations:
        checksum/nats-config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
      {{- if and  .Values.global.nats.jetStream.enabled .Values.global.nats.jetStream.tls }}
        checksum/nats-tls: {{ include (print $.Template.BasePath "/nats-jetstream-tls-secret.yaml") . | sha256sum }}
      {{- end }}
      {{- if .Values.exporter.enabled }}
        prometheus.io/path: /metrics
        prometheus.io/port: "7777"
        prometheus.io/scrape: "true"
      {{- end }}
      {{- range $key, $value := .Values.podAnnotations }}
        {{ $key }}: {{ $value | quote }}
      {{- end }}
      labels:
        tier: astronomer
        app: {{ template "nats.name" . }}
        version: {{ .Chart.Version }}
        release: {{ .Release.Name }}
        component: nats
        chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    spec:
{{- include "nats.imagePullSecrets" . | indent 6 }}
{{- if eq .Values.global.openshiftEnabled false }}
      securityContext: {{ toYaml .Values.podSecurityContext| nindent 8 }}
{{- end }}
      nodeSelector:
{{ toYaml (default .Values.global.platformNodePool.nodeSelector .Values.nodeSelector) | indent 8 }}
      affinity:
{{ toYaml (default .Values.global.platformNodePool.affinity .Values.affinity) | indent 8 }}
      tolerations:
{{ toYaml (default .Values.global.platformNodePool.tolerations .Values.tolerations) | indent 8 }}
      # Common volumes for the containers.
      volumes:
      - name: config-volume
        configMap:
          name: {{ template "nats.name" . }}-config

      # Local volume shared with the reloader.
      - name: pid
        emptyDir: {}

      {{- if .Values.auth.enabled }}
      {{- if eq .Values.auth.resolver.type "memory" }}
      # Volume with the memory resolver configuration.
      - name: resolver-volume
        configMap:
          name: {{ .Values.auth.resolver.configMap.name }}
      {{- end }}

      {{- if eq .Values.auth.resolver.type "URL" }}
      - name: operator-jwt-volume
        configMap:
          name: {{ .Values.auth.operatorjwt.configMap.name }}
      {{- end }}
      {{- end }}

      #################
      #  TLS Volumes  #
      #################
      {{- with .Values.nats.tls }}
      {{ $secretName := .secret.name }}
      - name: {{ $secretName }}-clients-volume
        secret:
          secretName: {{ $secretName }}
      {{- end }}
      {{- with .Values.cluster.tls }}
      {{ $secretName := .secret.name }}
      - name: {{ $secretName }}-cluster-volume
        secret:
          secretName: {{ $secretName }}
      {{- end }}
      {{- with .Values.leafnodes.tls }}
      {{ $secretName := .secret.name }}
      - name: {{ $secretName }}-leafnodes-volume
        secret:
          secretName: {{ $secretName }}
      {{- end }}
      {{- with .Values.gateway.tls }}
      {{ $secretName := .secret.name }}
      - name: {{ $secretName }}-gateways-volume
        secret:
          secretName: {{ $secretName }}
      {{- end }}
      {{- if and  .Values.global.nats.jetStream.enabled  .Values.global.nats.jetStream.tls  }}
      {{ $secretName :=  include "nats.jestreamTLSSecret" . }}
      - name: {{ $secretName }}-client-volume
        secret:
          secretName: {{ $secretName }}-client
      - name: {{ $secretName }}-server-volume
        secret:
          secretName: {{ $secretName }}
      {{- end }}

      {{- if .Values.leafnodes.enabled }}
      #
      # Leafnode credential volumes
      #
      {{- range .Values.leafnodes.remotes }}
      {{- with .credentials }}
      - name: {{ .secret.name }}-volume
        secret:
          secretName: {{ .secret.name }}
      {{- end }}
      {{- end }}
      {{- end }}

      # Required to be able to HUP signal and apply config
      # reload to the server without restarting the pod.
      shareProcessNamespace: true

      #################
      #  NATS Server  #
      #################
      terminationGracePeriodSeconds: {{ .Values.nats.terminationGracePeriodSeconds }}
      containers:
      - name: nats
        image: {{ include "nats.image" . }}
        imagePullPolicy: {{ .Values.images.nats.pullPolicy }}
        securityContext: {{ template "nats.securityContext" . }}
        ports:
        - containerPort: 4222
          name: client
        - containerPort: 7422
          name: leafnodes
        - containerPort: 7522
          name: gateways
        - containerPort: 6222
          name: cluster
        - containerPort: 8222
          name: monitor
        - containerPort: 7777
          name: metrics
        command:
         - "nats-server"
         - "--config"
         - "/etc/nats-config/nats.conf"

        # Required to be able to define an environment variable
        # that refers to other environment variables.  This env var
        # is later used as part of the configuration file.
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: CLUSTER_ADVERTISE
          value: {{ template "nats.clusterAdvertise" . }}
        volumeMounts:
          - name: config-volume
            mountPath: /etc/nats-config
          - name: pid
            mountPath: /var/run/nats

          {{- if .Values.auth.enabled }}
          {{- if eq .Values.auth.resolver.type "memory" }}
          - name: resolver-volume
            mountPath: /etc/nats-config/accounts
          {{- end }}

          {{- if eq .Values.auth.resolver.type "URL" }}
          - name: operator-jwt-volume
            mountPath: /etc/nats-config/operator
          {{- end }}
          {{- end }}

          {{- if and ( or .Values.nats.jetstream.enabled  .Values.global.nats.jetStream.enabled ) .Values.nats.jetstream.fileStorage.enabled }}
          - name: {{ template "nats.name" . }}-js-pvc
            mountPath: {{ .Values.nats.jetstream.fileStorage.storageDirectory }}
          {{- end }}

          #######################
          #  TLS Volumes Mounts #
          #######################
          {{- with .Values.nats.tls }}
          {{ $secretName := .secret.name }}
          - name: {{ $secretName }}-server-volume
            mountPath: /etc/nats-certs/server/{{ $secretName }}
          - name: {{ $secretName }}-client-volume
            mountPath: /etc/nats-certs/client/{{ $secretName }}-client
          {{- end }}
          {{- with .Values.cluster.tls }}
          {{ $secretName := .secret.name }}
          - name: {{ $secretName }}-cluster-volume
            mountPath: /etc/nats-certs/cluster/{{ $secretName }}
          {{- end }}
          {{- with .Values.leafnodes.tls }}
          {{ $secretName := .secret.name }}
          - name: {{ $secretName }}-leafnodes-volume
            mountPath: /etc/nats-certs/leafnodes/{{ $secretName }}
          {{- end }}
          {{- with .Values.gateway.tls }}
          {{ $secretName := .secret.name }}
          - name: {{ $secretName }}-gateways-volume
            mountPath: /etc/nats-certs/gateways/{{ $secretName }}
          {{- end }}

          {{- if and  .Values.global.nats.jetStream.enabled  .Values.global.nats.jetStream.tls  }}
          {{ $secretName :=  include "nats.jestreamTLSSecret" . }}
          - name: {{ $secretName }}-server-volume
            mountPath: /etc/nats-certs/server/{{ $secretName }}
          - name: {{ $secretName }}-client-volume
            mountPath: /etc/nats-certs/client/{{ $secretName }}-client
          {{- end }}

          {{- if .Values.leafnodes.enabled }}
          #
          # Leafnode credential volumes
          #
          {{- range .Values.leafnodes.remotes }}
          {{- with .credentials }}
          - name: {{ .secret.name }}-volume
            mountPath: /etc/nats-creds/{{ .secret.name }}
          {{- end }}
          {{- end }}
          {{- end }}
        resources:
{{ toYaml .Values.nats.resources | indent 10 }}
        # Liveness/Readiness probes against the monitoring.
        #
        livenessProbe:
          httpGet:
            path: /
            port: 8222
          initialDelaySeconds: 10
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /
            port: 8222
          initialDelaySeconds: 10
          timeoutSeconds: 5

        # Gracefully stop NATS Server on pod deletion or image upgrade.
        #
        lifecycle:
          preStop:
            exec:
              # Using the alpine based NATS image, we add an extra sleep that is
              # the same amount as the terminationGracePeriodSeconds to allow
              # the NATS Server to gracefully terminate the client connections.
              #
              command: ["/bin/sh", "-c", "nats-server -sl=ldm=/var/run/nats/nats.pid && /bin/sleep 60"]

      #################################
      #  NATS Configuration Reloader  #
      #################################
      {{ if .Values.reloader.enabled }}
      - name: reloader
        image: {{ .Values.reloader.image }}
        imagePullPolicy: {{ .Values.reloader.pullPolicy }}
        securityContext: {{ template "nats.securityContext" . }}
        command:
         - "nats-server-config-reloader"
         - "-pid"
         - "/var/run/nats/nats.pid"
         - "-config"
         - "/etc/nats-config/nats.conf"
        volumeMounts:
          - name: config-volume
            mountPath: /etc/nats-config
          - name: pid
            mountPath: /var/run/nats
        resources:
{{ toYaml .Values.reloader.resources | indent 10 }}
      {{ end }}

      ##############################
      #  NATS Prometheus Exporter  #
      ##############################
      {{ if .Values.exporter.enabled }}
      - name: metrics
        image: {{ template "nats-exporter.image" . }}
        imagePullPolicy: {{ .Values.images.exporter.pullPolicy }}
        securityContext: {{ template "nats.securityContext" . }}
        args:
        - -connz
        - -routez
        - -subz
        - -varz
        - -prefix=gnatsd
        - -use_internal_server_id
        {{- if .Values.nats.jetstream.enabled }}
        - -jsz=all
        {{- end }}
        - http://localhost:8222/
        ports:
        - containerPort: 7777
          name: metrics
        resources:
{{ toYaml .Values.exporter.resources | indent 10 }}
      {{ end }}
  {{- if and ( or .Values.nats.jetstream.enabled .Values.global.nats.jetStream.enabled ) .Values.nats.jetstream.fileStorage.enabled (not .Values.nats.jetstream.fileStorage.existingClaim) }}
  volumeClaimTemplates:
  #####################################
  #                                   #
  #  Jetstream New Persistent Volume  #
  #                                   #
  #####################################
    - metadata:
        name: {{ template "nats.name" . }}-js-pvc
        {{- if .Values.nats.jetstream.fileStorage.annotations }}
        annotations:
        {{- range $key, $value := .Values.nats.jetstream.fileStorage.annotations }}
          {{ $key }}: {{ $value | quote }}
        {{- end }}
        {{- end }}
      spec:
        accessModes:
        {{- range .Values.nats.jetstream.fileStorage.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.nats.jetstream.fileStorage.size }}
        {{- if .Values.nats.jetstream.fileStorage.storageClassName }}
        storageClassName: {{ .Values.nats.jetstream.fileStorage.storageClassName | quote }}
        {{- end }}
  {{- end }}
