
########################################
## Nats Jetstream SSL Certificate   ####
########################################
{{ if and  .Values.global.nats.jetStream.enabled .Values.global.nats.jetStream.tls }}
{{- $dn := printf "%s-nats" .Release.Name }}
{{- $ns := printf "%s" .Release.Namespace }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "nats.name" . }}-tls-script-config
  labels:
    app: {{ template "nats.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
  annotations:
    "helm.sh/hook": "pre-install,pre-upgrade"
    "helm.sh/hook-weight": "-2"
data:
  tls-script.sh: |

    #!/bin/bash
    export DOMAIN={{ .Release.Name }}-nats
    export RELEASE_NAME={{ .Release.Namespace }}

    # Create private CA
    openssl genrsa -out rootCA.key 2048
    openssl req -x509 -new -nodes -key rootCA.key -sha256 -subj "/CN=ASTRONOMERCA" -days 365 -out rootCA.pem

    cat > server_config.cnf <<EOF
    [req]
    default_bits = 2048
    prompt = no
    default_md = sha256
    distinguished_name = dn
    req_extensions = req_ext


    [dn]
    C = US
    ST = WA
    L = Seattle
    O = ${DOMAIN}
    OU = ${DOMAIN}
    CN = ${DOMAIN}.astronomer.svc.cluster.local

    [ req_ext ]
    basicConstraints = CA:FALSE
    keyUsage = nonRepudiation, digitalSignature, keyEncipherment
    subjectAltName = @alternate_names

    [alternate_names]
    DNS.1 = ${DOMAIN}
    DNS.2 = ${DOMAIN}.${RELEASE_NAME}
    DNS.3 = ${DOMAIN}.${RELEASE_NAME}.svc
    DNS.4 = *.${DOMAIN}
    DNS.5 = *.${DOMAIN}.${RELEASE_NAME}
    DNS.6 = *.${DOMAIN}.${RELEASE_NAME}.svc
    DNS.10 = {{ .Values.global.baseDomain }}
    DNS.8 = localhost
    IP.1  = ::1

    EOF


    cat > client_config.cnf <<EOF

    [req]
    default_bits = 2048
    prompt = no
    default_md = sha256
    distinguished_name = dn
    req_extensions = req_ext

    [dn]
    CN = ${DOMAIN}

    [ req_ext ]
    basicConstraints = CA:FALSE
    keyUsage = digitalSignature, keyEncipherment
    extendedKeyUsage = clientAuth
    subjectAltName = @alternate_names

    [alternate_names]
    DNS.1 = ${DOMAIN}
    DNS.2 = ${DOMAIN}.${RELEASE_NAME}
    DNS.3 = ${DOMAIN}.${RELEASE_NAME}.svc
    DNS.4 = *.${DOMAIN}
    DNS.5 = *.${DOMAIN}.${RELEASE_NAME}
    DNS.6 = *.${DOMAIN}.${RELEASE_NAME}.svc
    DNS.10 = {{ .Values.global.baseDomain }}
    DNS.11  = localhost
    IP.1  = ::1

    EOF



    # Generate server key and CSR using server_config.cnf
    openssl genrsa -out server.key 2048
    openssl req -new -key server.key -out server.csr -config server_config.cnf


    ## Sign server certificate with CA and include Subject Alternative Names extension

    openssl x509 -req -in server.csr -CA rootCA.pem -CAkey rootCA.key \
        -CAcreateserial -out server.pem -days 3650 \
        -extfile server_config.cnf -extensions req_ext -sha256


    ## Generate client key and CSR using client_config.cnf

    openssl genrsa -out client.key 2048
    openssl req -new -key client.key -out client.csr -config client_config.cnf

    ## Sign client certificate with CA and include Subject Alternative Names extension

    openssl x509 -req -in client.csr -CA rootCA.pem -CAkey rootCA.key \
      -CAcreateserial -out client.pem -days 3650 \
      -extfile client_config.cnf -extensions req_ext -sha256

    SERVER_CERT=$(cat server.pem )
    SERVER_KEY=$(cat server.key )
    CLIENT_CERT=$(cat client.pem )
    CLIENT_KEY=$(cat client.key  )
    CA_CERT=$(cat rootCA.pem )

    kubectl delete secret {{ .Release.Name }}-jetstream-tls-certificate {{ .Release.Name }}-jetstream-tls-certificate-houston -n {{ .Release.Namespace }} || true
    kubectl create secret generic astronomer-jetstream-tls-certificate  --from-literal=tls.crt="$SERVER_CERT" --from-literal=tls.key="$SERVER_KEY" --from-literal=ca.crt="$CA_CERT"
    kubectl create secret generic  astronomer-jetstream-tls-certificate-houston  --from-literal=tls.crt="$CLIENT_CERT" --from-literal=tls.key="$CLIENT_KEY" --from-literal=ca.crt="$CA_CERT"

{{ end }}
