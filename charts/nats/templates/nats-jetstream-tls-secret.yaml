######################################
##  Nats Jetstream SSL Certificate  ##
######################################
{{ if and  .Values.global.nats.jetStream.enabled .Values.global.nats.jetStream.tls }}
{{- $ca := genCA "ca" 3650 }}
{{- $cn := printf "%s-nats" .Release.Name }}
{{- $altName1 := printf "%s.%s" $cn .Release.Namespace }}
{{- $altName2 := printf "%s.%s.svc" $cn .Release.Namespace }}
{{- $altName3 := printf "*.%s.%s.svc" $cn .Release.Namespace }}
{{- $cert := genSignedCert $cn nil (list $altName1 $altName2 $altName3) 3650 $ca }}
{{- $clientcert := genSignedCert $cn nil (list $cn $altName1 $altName2 $altName3 ) 3650 $ca }}
{{- $certName :=  printf "%s" (include "nats.jestreamTLSSecret" . ) }}
{{- $getNatsCert := (lookup "v1" "Secret" .Release.Namespace $certName ) | default dict }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ template "nats.jestreamTLSSecret" . }}
  labels:
    component: nats
    tier: nats
    release: {{ .Release.Name }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: {{ .Release.Service }}
  annotations:
    {{- if or .Values.nats.regenerateCaEachUpgrade ( not $getNatsCert)  }}
    "helm.sh/hook": "pre-install,pre-upgrade"
    {{- else }}
    "helm.sh/hook": "pre-install"
    {{- end }}
    # before-hook-creation    Delete the previous resource before a new hook is launched (default)
    # This ensures that 'pre-upgrade' hook will not collide with existing secret, the previous
    # secret should be cleaned up before running the next pre-upgrade hook.
    "helm.sh/hook-delete-policy": "before-hook-creation"
    "helm.sh/hook-weight": "-10"
    {{ if .Values.global.enableArgoCDAnnotation }}
    argocd.argoproj.io/sync-wave: "-1"
    {{- end }}
type: Opaque
data:
  tls.key: {{ b64enc $cert.Key }}
  tls.crt: {{ b64enc $cert.Cert }}
  ca.crt: {{ b64enc $ca.Cert  }}
---
{{- $houstoncertName :=  printf "%s-client" (include "nats.jestreamTLSSecret" . ) }}
{{- $getNatsClientCert := (lookup "v1" "Secret" .Release.Namespace $houstoncertName ) | default dict }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $houstoncertName }}
  labels:
    component: nats
    tier: nats
    release: {{ .Release.Name }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    heritage: {{ .Release.Service }}
  annotations:
    {{- if or .Values.nats.regenerateCaEachUpgrade ( not $getNatsClientCert) }}
    "helm.sh/hook": "pre-install,pre-upgrade"
    {{- else }}
    "helm.sh/hook": "pre-install"
    {{- end }}
    # before-hook-creation    Delete the previous resource before a new hook is launched (default)
    # This ensures that 'pre-upgrade' hook will not collide with existing secret, the previous
    # secret should be cleaned up before running the next pre-upgrade hook.
    "helm.sh/hook-delete-policy": "before-hook-creation"
    "helm.sh/hook-weight": "-10"
    {{ if .Values.global.enableArgoCDAnnotation }}
    argocd.argoproj.io/sync-wave: "-1"
    {{- end }}
type: Opaque
data:
  tls.key: {{ b64enc $clientcert.Key }}
  tls.crt: {{ b64enc $clientcert.Cert }}
  ca.crt: {{ b64enc $ca.Cert  }}
{{- end}}
