---
- name: Validate that namespace is 'default'
  assert:
    that:
      - lookup('env', 'ASTRONOMER_UPGRADER_NAMESPACE') == "default"

- name: Set up variables
  set_fact:
    backup_dir: "/astronomer-backups"
    timestamp: "{{ lookup('pipe', 'date +%Y-%m-%d-%H-%M-%S') }}"
    upgrade_to_version: "0.25.13"
    use_internal_helm_repo: "{{ lookup('env', 'USE_INTERNAL_HELM_REPO') }}"
    # db_hostname: "localhost"
    # db_username: "postgres"
    # db_password: "postgres"
    # db_port: "5432"

- name: Find the Astronomer Helm release (helm list)
  register: helm_releases
  shell: |
    helm list --all-namespaces -o json --offset=0 --max=1000

- name: Find the Astronomer Helm release (parse results)
  set_fact:
    release_name: "{{ (helm_releases.stdout | from_json | selectattr('chart', 'match', 'astronomer-.*') | list)[0].name }}"
    namespace: "{{ (helm_releases.stdout | from_json | selectattr('chart', 'match', 'astronomer-.*') | list)[0].namespace }}"
    airflow_releases: "{{ helm_releases.stdout | from_json | selectattr('chart', 'match', 'airflow-.*') | list | map(attribute='name') | list }}"
    database_name: "{{ (helm_releases.stdout | from_json | selectattr('chart', 'match', 'astronomer-.*') | list)[0].name | regex_replace( '-', '_') }}"

- name: Show Airflow releases
  debug:
    msg: "{{ airflow_releases }}"

- name: Show Helm chart info
  debug:
    msg: |
      Release Name: {{ release_name }}, Namespace: {{ namespace }}

- name: "Check that release name and namespace are correctly configured (1/3): helm status"
  changed_when: false
  register: helm_status_raw
  shell: |
    helm status -o json --namespace {{ namespace }} {{ release_name }}

- name: "Check that release name and namespace are correctly configured (2/3): parse json"
  set_fact:
    helm_status: "{{ helm_status_raw.stdout | from_json }}"

- name: "Check that release name and namespace are correctly configured (3/3): assert contents look right"
  changed_when: false
  assert:
    that:
      - helm_status.name == release_name
      - helm_status.info.status == 'deployed'
      - helm_status.namespace == namespace

- name: "Fetch Helm history from Astronomer (1/2): helm history"
  changed_when: false
  register: helm_history_raw
  shell: |
    helm history -o json --namespace {{ namespace }} {{ release_name }}

- name: "Fetch Helm history from Astronomer (2/2): parse json"
  set_fact:
    # this will select only the current revision from the helm history
    helm_history: "{{ helm_history_raw.stdout | from_json | last }}"

- name: Show information about current Helm revision
  changed_when: false
  debug:
    msg:
      - "Helm install revision: {{ helm_history.revision }}"
      - "App version: {{ helm_history.app_version }}"
      - "Helm chart: {{ helm_history.chart }}"
      - "Status: {{ helm_history.status }}"

- name: Assert helm revision looks right
  changed_when: false
  assert:
    that:
      - helm_history.status == "deployed"
      - "'0.23' in helm_history.app_version"
      - "'astronomer' in helm_history.chart"

- name: "Fetch Helm values from Astronomer (1/2): helm get values"
  register: helm_values_raw
  changed_when: false
  shell: |
    helm get values -o json --namespace {{ namespace }} {{ release_name }}

- name: "Fetch Helm values from Astronomer (2/2): parse json"
  set_fact:
    helm_values: "{{ helm_values_raw.stdout | from_json }}"

- name: Find database connection from secret astronomer-boostrap
  changed_when: false
  community.kubernetes.k8s_info:
    api_version: v1
    kind: Secret
    name: astronomer-bootstrap
    namespace: "{{ namespace }}"
  register: astronomer_bootstrap

- set_fact:
    db_connection: "{{ astronomer_bootstrap.resources[0].data.connection | b64decode }}"

- set_fact:
    db_username: "{{ db_connection | regex_search(regex, '\\g<username>') | first }}"
    db_password: "{{ db_connection | regex_search(regex, '\\g<password>') | first }}"
    db_hostname: "{{ db_connection | regex_search(regex, '\\g<hostname>') | first }}"
    db_port: "{{ db_connection | regex_search(regex, '\\g<port>') | first }}"
  vars:
    regex: 'postgres(ql)?:\/\/(?P<username>[^:]+):(?P<password>[^@]+)@(?P<hostname>[^:]+):(?P<port>\d+)'

- debug:
    msg:
      - "DB hostname: {{ db_hostname }}"
      - "DB port: {{ db_port }}"
      - "DB username: {{ db_username }}"

- name: Ensure DB network policy is removed
  community.kubernetes.k8s:
    state: absent
    api_version: "networking.k8s.io/v1"
    kind: NetworkPolicy
    namespace: "{{ namespace }}"
    name: "{{ item }}"
  with_items:
    - "{{ release_name }}-default-deny-ingress"
    - "{{ release_name }}-postgresql"

- name: Check that we can connect to the database
  postgresql_query:
    port: "{{ db_port }}"
    login_host: "{{ db_hostname }}"
    login_user: "{{ db_username }}"
    login_password: "{{ db_password }}"
    db: "{{ database_name }}_houston"
    query: |
      SET search_path to "houston$default";

# In the event the user rolls back, we need to make sure
# the houston prisma 1 migration runs before we try to
# re-run the upgrade
- name: Wait for Houston to apply migrations in 0.23
  retries: 30
  delay: 5
  until: result is not failed
  register: result
  changed_when: false
  postgresql_query:
    port: "{{ db_port }}"
    login_host: "{{ db_hostname }}"
    login_user: "{{ db_username }}"
    login_password: "{{ db_password }}"
    db: "{{ database_name }}_houston"
    query: |
      SET search_path to "houston$default";
      SELECT "localCredentialId" FROM "houston$default"."User";

# TODO: check that every airflow has airflow version defined in DB

- name: Back up the Helm secret state
  changed_when: false
  community.kubernetes.k8s_info:
    api_version: v1
    kind: Secret
    name: "sh.helm.release.v1.{{ release_name }}.v{{ helm_history.revision }}"
    namespace: "{{ namespace }}"
  register: helm_secret_raw

# Format the secret for reapplying later
- set_fact:
    helm_secret: {}
    helm_secret_metadata: {}
  changed_when: false

- set_fact:
    helm_secret: "{{ helm_secret | combine({item.key: item.value}) }}"
  no_log: true
  when: "item.key not in ['metadata']"
  with_dict: "{{ helm_secret_raw.resources[0] }}"
  changed_when: false

- set_fact:
    helm_secret_metadata: "{{ helm_secret_metadata | combine({item.key: item.value}) }}"
  when: "item.key not in ['resourceVersion', 'uid', 'selfLink', 'creationTimestamp']"
  no_log: true
  changed_when: false
  with_dict: "{{ helm_secret_raw.resources[0].metadata }}"

- set_fact:
    helm_secret: "{{ helm_secret | combine({'metadata': helm_secret_metadata}) }}"
  changed_when: false

- name: Ensure backup directory is created
  file:
    path: "{{ backup_dir }}"
    state: directory

- name: Create save directory
  register: astro_save_dir
  file:
    path: "{{ backup_dir }}/astro-save-{{ timestamp }}"
    state: directory

- name: Backup Helm backend state
  copy:
    dest: "{{ astro_save_dir.path }}/helm-secret.yaml"
    content: "{{ helm_secret | to_yaml }}"

- name: Backup Astronomer Helm values
  copy:
    dest: "{{ astro_save_dir.path }}/helm-user-values.json"
    content: "{{ helm_values | to_json }}"

- name: Backup Astronomer revision
  copy:
    dest: "{{ astro_save_dir.path }}/helm-revision.json"
    content: "{{ helm_history | to_json }}"

- name: Backup Astronomer Helm status
  copy:
    dest: "{{ astro_save_dir.path }}/helm-status.json"
    content: "{{ helm_status | to_json }}"

- name: Configure for public usage
  block:
    - name: Use public helm repo
      shell: |
        set -xe
        helm repo add astronomer https://helm.astronomer.io
        helm repo update
  when: (use_internal_helm_repo is not defined) or not (use_internal_helm_repo | bool)

- name: Configure for dev usage
  block:
    - name: Use internal helm repo
      shell: |
        set -xe
        helm repo add astronomer https://internal-helm.astronomer.io
        helm repo update
    - name: Use development versions
      set_fact:
        upgrade_to_version: "{{ upgrade_to_version }}"
  when: (use_internal_helm_repo is defined) and (use_internal_helm_repo | bool)

- name: Backup Astronomer database
  postgresql_db:
    port: "{{ db_port }}"
    login_host: "{{ db_hostname }}"
    login_user: "{{ db_username }}"
    login_password: "{{ db_password }}"
    name: "{{ database_name }}_houston"
    state: dump
    target: "{{ astro_save_dir.path }}/astronomer-db-backup.tar"
    target_opts: "--clean --create --format=tar"

# The db migration container waits on NATs, and for that, we need the new pods.
# Also, there are new network security policies we need to apply before the db migration.
- name: "(1/4) Upgrade Astronomer: Helm upgrade - Update software in Astronomer. Watch for 'helm list' to show new version."
  shell: >
    helm upgrade
    --namespace {{ namespace }}
    --reset-values
    -f {{ astro_save_dir.path }}/helm-user-values.json
    --no-hooks
    --set astronomer.houston.upgradeDeployments.enabled=false
    --version={{ upgrade_to_version }}
    {{ release_name }}
    astronomer/astronomer

- name: "(2/4) Update supported Airflow versions list. Look for pod airflow-update-check-first-run to appear after 40 seconds then complete in success"
  shell: |
    set -xe
    kubectl delete job --namespace {{ namespace }} airflow-update-check-first-run || true
    kubectl create job --namespace {{ namespace }} --from=cronjob/{{ release_name }}-houston-update-airflow-check airflow-update-check-first-run
    kubectl wait --for=condition=complete --timeout=300s --namespace {{ namespace }} job/airflow-update-check-first-run
  retries: 10
  delay: 10
  register: result
  until: result.rc == 0

- name: "(3/4) Upgrade Astronomer: Helm upgrade - Update Airflow configurations. Watch for Airflow charts to upgrade version with 'helm list --all-namespaces', watch for airflow pods to start back up."
  shell: >
    helm upgrade
    --namespace {{ namespace }}
    --reset-values
    -f {{ astro_save_dir.path }}/helm-user-values.json
    --set astronomer.houston.upgradeDeployments.enabled=true
    --version={{ upgrade_to_version }}
    {{ release_name }}
    astronomer/astronomer

- name: "(4/4) Upgrade Astronomer: Helm upgrade - Turn off airflow auto upgrade configuration. Perfunctory step, nothing to look for."
  shell: >
    helm upgrade
    --namespace {{ namespace }}
    --reset-values
    -f {{ astro_save_dir.path }}/helm-user-values.json
    --no-hooks
    --set astronomer.houston.upgradeDeployments.enabled=false
    --version={{ upgrade_to_version }}
    {{ release_name }}
    astronomer/astronomer
