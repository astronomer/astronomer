version: 2.1
executors:
  docker-executor:
    environment:
      GIT_ORG: astronomer
    docker:
      - image: cimg/python:3.11

orbs:
  slack: circleci/slack@4.10.1
  python: circleci/python@2.1.1

parameters:
  scan-docker-images:
    type: boolean
    default: false
    description: "This will run docker image scan."
  scan-docker-images-report-url:
    type: string
    default: ""
    description: "The URN to report image scan result."
  qa-release:
    type: boolean
    default: false
    description: "This will trigger QA release workflow."

jobs:
  trivy-scan-docker:
    docker:
      - image: cimg/base:current-22.04
    shell: /usr/bin/bash
    parameters:
      docker_image:
        type: string
      report_url:
        type: string
        default: ""
      slack_notify:
        type: boolean
        default: false
    environment:
      SCAN_IMAGE: << parameters.docker_image >>
      SCAN_TOOL: Trivy
      BASH_ENV: /etc/profile
      ASTRO_SEC_ENDPOINT: << parameters.report_url >>
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run: set -euo pipefail
      - checkout
      - run:
          name: Pull Docker image
          command: docker pull << parameters.docker_image >>
      - run:
          name: Install trivy
          command: |
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/master/contrib/install.sh | sudo sh -s -- -b /usr/local/bin
            date +%F > date
      - restore_cache:
          keys:
            {% raw %}- trivy-cache-{{ checksum "date" }}{% endraw %}
      - run:
          name: Scan the local image with trivy
          command: bin/trivy-scan.sh "<< parameters.docker_image >>" ".circleci/trivyignore"
      - when:
          condition:
            or:
              - << parameters.slack_notify >>
          steps:
            - run:
                name: Slack Init
                command: |
                  echo 'export SLACK_MSG_TEMPLATE=$(cat ./.circleci/slack_message_templates/security_scan_fail.json)' >> $BASH_ENV
                  source $BASH_ENV
                when: on_fail
            - slack/notify:
                event: fail
                template: SLACK_MSG_TEMPLATE
                channel: C03HS1H9G1E
      - save_cache:
          {% raw %}key: trivy-cache-{{ checksum "date" }}{% endraw %}
          paths:
            - /tmp/workspace/trivy-cache

  twistcli-scan-docker:
    docker:
      - image: cimg/base:current-22.04
    shell: /usr/bin/bash
    parameters:
      docker_image:
        type: string
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run: set -euo pipefail
      - run:
          name: Pull Docker image
          command: docker pull << parameters.docker_image >>
      - run:
          name: Install twistcli
          command: |
            curl -k -u $USER:$PASSWORD --output twistcli $CONSOLE_URL"/api/v1/util/twistcli"
            chmod +x twistcli
      - run:
          name: scan image
          command: |
            ./twistcli images scan --address $CONSOLE_URL --user=$USER --password=$PASSWORD --details << parameters.docker_image >>

  run_pre_commit:
    docker:
      - image: quay.io/astronomer/ci-pre-commit:{{ ci_runner_version }}
    steps:
      - checkout
      - run:
          name: Create pre-commit-cache-key.txt
          command: |
            cp .pre-commit-config.yaml /tmp/pre-commit-cache-key.txt
            python --version --version | sed 's/^/# /' >> /tmp/pre-commit-cache-key.txt
      - restore_cache:
          keys:
            - pre-commit-cache-{{ '{{' }} checksum "/tmp/pre-commit-cache-key.txt" }}
      - run:
          name: Install pre-commit hooks
          command: pre-commit install-hooks
      - save_cache:
          key: pre-commit-cache-{{ '{{' }} checksum "/tmp/pre-commit-cache-key.txt" }}
          paths:
            - ~/.cache/pre-commit
      - run:
          name: Run pre-commit
          command: pre-commit run --all-files --show-diff-on-failure

  unittest-charts:
    docker:
      - image: quay.io/astronomer/ci-helm-release:{{ ci_runner_version }}
    parallelism: 8
    resource_class: xlarge
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - checkout
      - run:
          name: Create chart-tests-cache-key.txt
          command: |
            cp requirements/chart-tests.txt /tmp/chart-tests-cache-key.txt
            python --version --version | sed 's/^/# /' >> /tmp/chart-tests-cache-key.txt
      - restore_cache:
          keys:
            - chart-test-venv-{{ '{{' }} checksum "/tmp/chart-tests-cache-key.txt" }}
      - run:
          name: Create venv
          command: |
            make unittest-requirements
      - save_cache:
          key: chart-test-venv-{{ '{{' }} checksum "/tmp/chart-tests-cache-key.txt" }}
          paths:
            - ~/project/venv
            - ~/project/.unittest-requirements
      - run:
          name: unittest the Astronomer chart
          command: |
            mkdir test-results
            TEST_FILES=$(circleci tests glob "tests/chart_tests/test_*.py" | circleci tests split --split-by=timings)
            venv/bin/python -m pytest -v --junitxml=test-results/junit.xml -n auto $TEST_FILES
      - store_test_results:
          path: test-results

  build-artifact:
    docker:
      - image: quay.io/astronomer/ci-helm-release:{{ ci_runner_version }}
    parameters:
      qa_release:
        type: boolean
        default: false
    steps:
      - checkout
      - run:
          name: Package the Astronomer chart
          command: |
            source ./bin/install-ci-tools 1
            bin/build-helm-chart.sh << parameters.qa_release >>
      - persist_to_workspace:
          root: "."
          paths:
            - "./*.tgz"

  release-to-internal:
    docker:
      - image: quay.io/astronomer/ci-helm-release:{{ ci_runner_version }}
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Release the Astronomer chart to internal
          command: |
            set -e
            bin/release-helm-chart /tmp/workspace/astronomer-*.tgz

  trigger-upgrade-test:
    executor: docker-executor
    resource_class: small
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Triggering testing for upgrade path
          command: |
            set -e
            bin/trigger_rc_tests.py --astro_path=/tmp/workspace --circleci_token=$CIRCLECI_API_KEY_TEST

  trigger-feature-stack-release:
    executor: docker-executor
    resource_class: small
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Triggering update to feature cluster
          command: |
            set -e
            bin/trigger_feature_stack_update.py --astro_path=/tmp/workspace --circleci_token=$CIRCLECI_API_KEY_TEST --branch=$CIRCLE_BRANCH

  release-to-public:
    docker:
      - image: quay.io/astronomer/ci-helm-release:{{ ci_runner_version }}
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Release the Astronomer chart to prod
          command: |
            bin/release-helm-chart -p /tmp/workspace/astronomer-*.tgz
      - publish-github-release
{% for version in kube_versions %}
  platform-{{ version | replace(".", "-") }}:
    machine:
      image: {{ machine_image_version }}
      resource_class: xlarge
    environment:
      KUBE_VERSION: v{{ version }}
    steps:
      - helm-install:
          astronomer-tags: "platform postgresql monitoring logging"
      - run:
          name: Check chart for k8s {{ version }} compatibility with kubent
          command: |
            set -o pipefail
            helm template --kube-version=v{{ version }} -f values.yaml --set global.baseDomain=example.com . |
            kubent --cluster=false --helm3=false --filename -
          when: always
{%- endfor %}

  check-commander-airflow-version:
    docker:
      - image: cimg/base:current-22.04
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Check that commander image uses same Airflow chart version
          command: make validate-commander-airflow-version

workflows:
  version: 2.1

  # This workflow is triggered by https://app.circleci.com/settings/project/github/astronomer/astronomer/triggers
  scan-docker-images:
    when:
      and:
        - << pipeline.parameters.scan-docker-images >>
        - not: << pipeline.parameters.qa-release >>
    jobs:
      - trivy-scan-docker:
          report_url: << pipeline.parameters.scan-docker-images-report-url >>
          slack_notify: false
          matrix:
            parameters:
              docker_image:
{%- for image in docker_images %}
                - {{ image }}
{%- endfor %}
          context:
            - slack_team-software-infra-bot
      - twistcli-scan-docker:
          matrix:
            parameters:
              docker_image:
{%- for image in docker_images %}
                - {{ image }}
{%- endfor %}
          context:
            - twistcli

  build-and-release-helm-chart:
    when:
      and:
        - not: << pipeline.parameters.scan-docker-images >>
        - not: << pipeline.parameters.qa-release >>
    jobs:
      - run_pre_commit
      - unittest-charts
      - check-commander-airflow-version
      - build-artifact:
          requires:
            - check-commander-airflow-version
            - run_pre_commit
            - unittest-charts
      - approve-test-all-platforms:
          type: approval
{% for version in kube_versions %}{% if version in [kube_versions[0], kube_versions[-1]] %}
      - platform-{{ version | replace(".", "-") }}:
          requires:
            - build-artifact
{%- else %}
      - platform-{{ version | replace(".", "-") }}:
          requires:
            - approve-test-all-platforms
            - build-artifact
{% endif %}{% endfor %}
      - approve-internal-release:
          type: approval
          filters:
            branches:
              only:
                - '/^release-0\.\d+$/'
      - release-to-internal:
          context:
            - gcp-astronomer-prod
          filters:
            branches:
              only:
                - '/^release-0\.\d+$/'
          requires:
            - approve-internal-release
{%- for version in [kube_versions[0], kube_versions[-1]] %}
            - platform-{{ version | replace(".", "-") }}
{%- endfor %}
      - approve-upgrade-test:
          type: approval
          filters:
            branches:
              only:
                - '/^release-0\.\d+$/'
      - trigger-upgrade-test:
          requires:
            - release-to-internal
            - approve-upgrade-test
          filters:
            branches:
              only:
                - '/^release-0\.\d+$/'
      - approve-public-release:
          type: approval
          requires:
            - release-to-internal
{%- for version in kube_versions[1:-1] %}
            - platform-{{ version | replace(".", "-") }}
{%- endfor %}
          filters:
            branches:
              only:
                - '/^release-0\.\d+$/'

      - release-to-public:
          context:
            - gcp-astronomer-prod
            - github-repo
          requires:
            - approve-public-release
          filters:
            branches:
              only:
                - '/^release-0\.\d+$/'

  qa-build-and-release-helm-chart:
    when:
      and:
        - << pipeline.parameters.qa-release >>
        - not: << pipeline.parameters.scan-docker-images >>
    jobs:
      - run_pre_commit
      - unittest-charts
      - check-commander-airflow-version
      - build-artifact:
          qa_release: true
          requires:
            - check-commander-airflow-version
            - run_pre_commit
            - unittest-charts
      - release-to-internal:
          context:
            - gcp-astronomer-prod
          requires:
            - build-artifact
          filters:
            branches:
              only:
                - '/^release-0\.\d+$/'
      - trigger-feature-stack-release:
          requires:
            - release-to-internal
          filters:
            branches:
              only:
                - '/^release-0\.\d+$/'

commands:
  push-to-quay-io:
    description: "Push a Docker image to Quay.io"
    parameters:
      comma_separated_tags:
        type: string
        default: latest
      docker_repository:
        type: string
        default: $DOCKER_REPO
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/<< parameters.image_name >>.tar
      - run:
          name: Login to Quay.io
          command: echo "$QUAY_PASSWORD" | docker login --username "$QUAY_USERNAME" --password-stdin quay.io
      - run:
          name: Push Docker image(s)
          command: |
            set -xe
            function docker_tag_exists() {
                curl --silent -f -lSL "https://quay.io/api/v1/repository/$1/tag/$2/images" > /dev/null
            }
            function tag_and_push() {
                docker tag "<< parameters.image_name >>" "quay.io/astronomer/<< parameters.image_name >>:$1"
                docker push "quay.io/astronomer/<< parameters.image_name >>:$1"
            }
            for tag in $(echo "<< parameters.comma_separated_tags >>" | sed "s/,/ /g");
            do
              # If the tag looks starts with "v" then a digit, remove the "v"
              pattern="^(v[0-9].*)"
              if [[ $tag =~ $pattern ]]; then
                tag="${tag:1}"
              fi
              if docker_tag_exists "<< parameters.docker_repository >>/<< parameters.image_name >>" "${tag}" ; then
                  if [[ "$tag" -eq "latest" ]]; then
                    tag_and_push "$tag"
                  else
                    echo "This docker tag already exists. Skipping the Docker push!"
                  fi
              else
                tag_and_push "$tag"
              fi
            done

  docker-build:
    description: "Build a Docker image"
    parameters:
      dockerfile:
        type: string
        default: Dockerfile
      path:
        type: string
        default: "."
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build the Docker image
          command: |
            set -xe
            image_name="<< parameters.image_name >>"
            docker build \
              -t "$image_name" \
              --file << parameters.path>>/<< parameters.dockerfile >> \
              --build-arg BUILD_NUMBER="${CIRCLE_BUILD_NUM}" \
              << parameters.path >>
            docker save -o << parameters.image_name >>.tar "$image_name"
      - persist_to_workspace:
          root: .
          paths:
            - "./<< parameters.image_name >>.tar"

  helm-install:
    description: "Install Helm chart from artifact"
    parameters:
      astronomer-tags:
        type: string
        default: "platform"
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "fb:bd:3c:2f:ef:af:e9:5b:fe:33:0e:e1:01:80:9f:cf"
      - run:
          name: Install Astronomer chart
          command: |
            echo 'export PATH="/tmp/bin:/tmp/google-cloud-sdk/bin:$PATH"' >> "$HOME/.bashrc"
            set -xe
            HELM_CHART_PATH='/tmp/workspace/astronomer-*.tgz' bin/run-ci << parameters.astronomer-tags >>
      - store_test_results:
          path: test-results

  publish-github-release:
    description: "Create a release on GitHub"
    parameters:
      tag:
        type: string
        default: "$NEXT_TAG"
    steps:
      - run:
          name: Create a release on GitHub
          command: |
            set -xe
            pip install astronomer_e2e_test
            astronomer-ci publish-github-release --github-repository "$CIRCLE_PROJECT_REPONAME" --github-organization "$CIRCLE_PROJECT_USERNAME" --commitish "$CIRCLE_SHA1"

  trivy-docker-test:
    description: "Trivy: Vulnerability scan a Docker image"
    parameters:
      docker_image:
        type: string
    steps:
      - trivy/vulnerability-scan:
            docker-image: << parameters.docker_image >>
