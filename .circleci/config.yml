# Warning: automatically generated file
# Please edit config.yml.j2, and use the script generate_circleci_config.py
version: 2.1
executors:
  docker-executor:
    environment:
      GIT_ORG: astronomer
    docker:
      - image: cimg/python:3.13

orbs:
  slack: circleci/slack@4.10.1
  python: circleci/python@2.1.1
  cosign: cpanato/cosign-orb@2.0.0

parameters:
  scan-docker-images:
    type: boolean
    default: false
    description: "This will run docker image scan."
  scan-docker-images-report-url:
    type: string
    default: ""
    description: "The URN to report image scan result."
  qa-release:
    type: boolean
    default: false
    description: "This will trigger QA release workflow."

jobs:
  sign-released-image:
    executor: docker-executor
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
          version: docker23
      - cosign/install:
          version: "v2.5.0"
      - run:
          name: Login to docker registry
          command: |
            echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USERNAME --password-stdin docker.io
            echo "$QUAY_PASSWORD" | docker login --username $QUAY_USERNAME --password-stdin quay.io
      - run:
          name: Set image tag to sign
          command: |
            set -xe
            # Only sign tagged releases or specific QA releases
            # For regular release job
            if [ -n "$NEXT_TAG" ]; then
              echo "export IMAGE_TAG=$NEXT_TAG" >> $BASH_ENV
            # For custom QA release job
            elif [ -n "$IMG_TAG" ]; then
              echo "export IMAGE_TAG=$IMG_TAG" >> $BASH_ENV
            else
              echo "No specific release tag found, skipping image signing"
              exit 0
            fi
      - run:
          name: Install Python dependencies
          command: pip install requests
      - run:
          name: Sign Docker images with cosign
          command: |
            # Execute the signing script with version from environment
            python bin/sign-images.py --version "${IMAGE_TAG}"

  trivy-scan-docker:
    docker:
      - image: cimg/base:current-24.04
    shell: /usr/bin/bash
    parameters:
      docker_image:
        type: string
      report_url:
        type: string
        default: ""
      slack_notify:
        type: boolean
        default: false
    environment:
      SCAN_IMAGE: << parameters.docker_image >>
      SCAN_TOOL: Trivy
      BASH_ENV: /etc/profile
      ASTRO_SEC_ENDPOINT: << parameters.report_url >>
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - run: set -euo pipefail
      - checkout
      - run:
          name: Pull Docker image
          command: docker pull << parameters.docker_image >>
      - run:
          name: Install trivy
          command: |
            curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/master/contrib/install.sh | sudo sh -s -- -b /usr/local/bin
            date +%F > date
      - restore_cache:
          keys:
            - trivy-cache-{{ checksum "date" }}
      - run:
          name: Scan the local image with trivy
          command: bin/trivy-scan.sh "<< parameters.docker_image >>" ".circleci/trivyignore"
      - when:
          condition:
            or:
              - << parameters.slack_notify >>
          steps:
            - run:
                name: Slack Init
                command: |
                  echo 'export SLACK_MSG_TEMPLATE=$(cat ./.circleci/slack_message_templates/security_scan_fail.json)' >> $BASH_ENV
                  source $BASH_ENV
                when: on_fail
            - slack/notify:
                event: fail
                template: SLACK_MSG_TEMPLATE
                channel: C03HS1H9G1E
      - save_cache:
          key: trivy-cache-{{ checksum "date" }}
          paths:
            - /tmp/workspace/trivy-cache

  release_bom:
    docker:
      - image: quay.io/astronomer/ci-helm-release:2025-10
    steps:
      - checkout
      - run:
          name: Install bom-generator
          command: |
            pip install git+https://${GITHUB_TOKEN}@github.com/astronomer/astronomer-bom-generator.git
      - run:
          name: Run Release BOM Script
          command: |
            bin/release-bom -x ${CIRCLE_TAG}

  run_pre_commit:
    docker:
      - image: quay.io/astronomer/ci-pre-commit:2025-10
    resource_class: small
    steps:
      - checkout
      - run:
          name: Create pre-commit-cache-key.txt
          command: |
            cp .pre-commit-config.yaml /tmp/pre-commit-cache-key.txt
            python --version --version | sed 's/^/# /' >> /tmp/pre-commit-cache-key.txt
      - restore_cache:
          keys:
            - pre-commit-cache-{{ checksum "/tmp/pre-commit-cache-key.txt" }}
      - run:
          name: Install pre-commit hooks
          command: pre-commit install-hooks
      - save_cache:
          key: pre-commit-cache-{{ checksum "/tmp/pre-commit-cache-key.txt" }}
          paths:
            - ~/.cache/pre-commit
      - run:
          name: Run pre-commit
          command: pre-commit run --all-files --show-diff-on-failure

  test-unit:
    docker:
      - image: quay.io/astronomer/ci-helm-release:2025-10
    # https://circleci.com/docs/using-docker/#x86
    resource_class: large
    parallelism: 4
    steps:
      - checkout
      - run:
          name: Create venv-cache-key.txt
          command: |
            cp tests/requirements.txt /tmp/requirements-cache-key.txt
            python --version --version | sed 's/^/# /' >> /tmp/requirements-cache-key.txt
      - restore_cache:
          keys:
            - test-venv-{{ checksum "/tmp/requirements-cache-key.txt" }}
      - run:
          name: Create venv
          command: |
            make venv
      - save_cache:
          key: test-venv-{{ checksum "/tmp/requirements-cache-key.txt" }}
          paths:
            - ~/.cache/uv
            - ~/.local/share/uv
            - ~/project/.venv
      - run:
          name: unittest the Astronomer chart
          command: |
            mkdir test-results
            TEST_FILES=$(circleci tests glob "tests/chart_tests/test_*.py" | circleci tests split --split-by=timings)
            echo "TEST_FILES=\"$TEST_FILES\""
            .venv/bin/python -m pytest -v --junitxml=test-results/junit.xml -n auto $TEST_FILES
      - store_test_results:
          path: test-results

  build-artifact:
    docker:
      - image: quay.io/astronomer/ci-helm-release:2025-10
    parameters:
      qa_release:
        type: boolean
        default: false
    steps:
      - checkout
      - run:
          name: Package the Astronomer chart
          command: |
            bin/install-ci-tools.py
            bin/build-helm-chart.sh << parameters.qa_release >>
      - persist_to_workspace:
          root: "."
          paths:
            - "./*.tgz"

  release-to-internal:
    docker:
      - image: quay.io/astronomer/ci-helm-release:2025-10
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Release the Astronomer chart to internal
          command: |
            set -e
            bin/release-helm-chart /tmp/workspace/astronomer-*.tgz

  trigger-upgrade-test:
    executor: docker-executor
    resource_class: small
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Triggering testing for upgrade path
          command: |
            set -e
            bin/trigger_rc_tests.py --astro_path=/tmp/workspace --circleci_token=$CIRCLECI_API_KEY_TEST

  trigger-feature-stack-release:
    executor: docker-executor
    resource_class: small
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Triggering update to feature cluster
          command: |
            set -e
            bin/trigger_feature_stack_update.py --astro_path=/tmp/workspace --circleci_token=$CIRCLECI_API_KEY_TEST --branch=$CIRCLE_BRANCH

  release-to-public:
    docker:
      - image: quay.io/astronomer/ci-helm-release:2025-10
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Release the Astronomer chart to prod
          command: |
            bin/release-helm-chart -p /tmp/workspace/astronomer-*.tgz
      - publish-github-release

  scenario-unified-1-29-14:
    machine:
      image: ubuntu-2404:2024.11.1
      resource_class: xlarge
    environment:
      KUBE_VERSION: v1.29.14
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Create venv-cache-key.txt
          command: |
            cp tests/requirements.txt /tmp/requirements-cache-key.txt
            python --version --version | sed 's/^/# /' >> /tmp/requirements-cache-key.txt
      - restore_cache:
          keys:
            - test-venv-{{ checksum "/tmp/requirements-cache-key.txt" }}
      - run:
          name: Install uv
          command: curl -fsSL https://astral.sh/uv/install.sh | sh
      - run:
          name: "Test scenario: unified"
          command: |
            make test-functional-unified
      - store_test_results:
          path: test-results
  scenario-unified-1-30-13:
    machine:
      image: ubuntu-2404:2024.11.1
      resource_class: xlarge
    environment:
      KUBE_VERSION: v1.30.13
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Create venv-cache-key.txt
          command: |
            cp tests/requirements.txt /tmp/requirements-cache-key.txt
            python --version --version | sed 's/^/# /' >> /tmp/requirements-cache-key.txt
      - restore_cache:
          keys:
            - test-venv-{{ checksum "/tmp/requirements-cache-key.txt" }}
      - run:
          name: Install uv
          command: curl -fsSL https://astral.sh/uv/install.sh | sh
      - run:
          name: "Test scenario: unified"
          command: |
            make test-functional-unified
      - store_test_results:
          path: test-results
  scenario-unified-1-31-9:
    machine:
      image: ubuntu-2404:2024.11.1
      resource_class: xlarge
    environment:
      KUBE_VERSION: v1.31.9
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Create venv-cache-key.txt
          command: |
            cp tests/requirements.txt /tmp/requirements-cache-key.txt
            python --version --version | sed 's/^/# /' >> /tmp/requirements-cache-key.txt
      - restore_cache:
          keys:
            - test-venv-{{ checksum "/tmp/requirements-cache-key.txt" }}
      - run:
          name: Install uv
          command: curl -fsSL https://astral.sh/uv/install.sh | sh
      - run:
          name: "Test scenario: unified"
          command: |
            make test-functional-unified
      - store_test_results:
          path: test-results
  scenario-unified-1-32-5:
    machine:
      image: ubuntu-2404:2024.11.1
      resource_class: xlarge
    environment:
      KUBE_VERSION: v1.32.5
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - checkout
      - run:
          name: Create venv-cache-key.txt
          command: |
            cp tests/requirements.txt /tmp/requirements-cache-key.txt
            python --version --version | sed 's/^/# /' >> /tmp/requirements-cache-key.txt
      - restore_cache:
          keys:
            - test-venv-{{ checksum "/tmp/requirements-cache-key.txt" }}
      - run:
          name: Install uv
          command: curl -fsSL https://astral.sh/uv/install.sh | sh
      - run:
          name: "Test scenario: unified"
          command: |
            make test-functional-unified
      - store_test_results:
          path: test-results

  check-commander-airflow-version:
    docker:
      # https://circleci.com/developer/images/image/cimg/base
      - image: cimg/base:current-24.04
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Check that commander image uses same Airflow chart version
          command: make validate-commander-airflow-version

workflows:
  version: 2.1

  # This workflow is triggered by https://app.circleci.com/settings/project/github/astronomer/astronomer/triggers
  scan-docker-images:
    when:
      and:
        - << pipeline.parameters.scan-docker-images >>
        - not: << pipeline.parameters.qa-release >>
    jobs:
      - trivy-scan-docker:
          report_url: << pipeline.parameters.scan-docker-images-report-url >>
          slack_notify: false
          matrix:
            parameters:
              docker_image:
                - quay.io/astronomer/airflow-operator-controller:1.5.2
                - quay.io/astronomer/ap-alertmanager:0.28.1-4
                - quay.io/astronomer/ap-astro-ui:1.0.25
                - quay.io/astronomer/ap-auth-sidecar:1.29.1-1
                - quay.io/astronomer/ap-awsesproxy:1.5.0-19
                - quay.io/astronomer/ap-base:3.21.3-6
                - quay.io/astronomer/ap-commander:1.0.19
                - quay.io/astronomer/ap-configmap-reloader:0.14.0
                - quay.io/astronomer/ap-curator:8.0.21-6
                - quay.io/astronomer/ap-dag-deploy:0.7.1
                - quay.io/astronomer/ap-db-bootstrapper:1.0.1
                - quay.io/astronomer/ap-default-backend:0.28.33
                - quay.io/astronomer/ap-elasticsearch-exporter:1.9.0
                - quay.io/astronomer/ap-elasticsearch:8.18.6
                - quay.io/astronomer/ap-git-daemon:3.21.3-6
                - quay.io/astronomer/ap-git-sync-relay:0.2.2
                - quay.io/astronomer/ap-git-sync:4.4.1-3
                - quay.io/astronomer/ap-grafana:10.4.17
                - quay.io/astronomer/ap-houston-api:1.0.35
                - quay.io/astronomer/ap-init:3.21.3-5
                - quay.io/astronomer/ap-kube-state:2.15.0
                - quay.io/astronomer/ap-kuiper-reloader:0.1.9
                - quay.io/astronomer/ap-nats-exporter:0.16.0-5
                - quay.io/astronomer/ap-nats-server:2.11.10
                - quay.io/astronomer/ap-nginx-es:1.29.0-1
                - quay.io/astronomer/ap-nginx:1.12.6
                - quay.io/astronomer/ap-openresty:1.27.1-7
                - quay.io/astronomer/ap-pgbouncer-exporter:0.19.0-1
                - quay.io/astronomer/ap-pgbouncer-krb:1.17.0-20
                - quay.io/astronomer/ap-pgbouncer:1.24.1-2
                - quay.io/astronomer/ap-postgres-exporter:0.17.1-1
                - quay.io/astronomer/ap-postgresql:17.6.0
                - quay.io/astronomer/ap-prometheus:3.5.0-2
                - quay.io/astronomer/ap-redis:8.0.3
                - quay.io/astronomer/ap-registry:3.0.0-1
                - quay.io/astronomer/ap-statsd-exporter:0.28.0-3
                - quay.io/astronomer/ap-vector:0.47.0-5
          context:
            - slack_team-software-infra-bot

  build-and-release-helm-chart:
    when:
      and:
        - not: << pipeline.parameters.scan-docker-images >>
        - not: << pipeline.parameters.qa-release >>
    jobs:
      - run_pre_commit
      - test-unit
      - check-commander-airflow-version
      - build-artifact:
          requires:
            - check-commander-airflow-version
            - run_pre_commit
            - test-unit
      - approve-test-all-platforms:
          type: approval

      - scenario-unified-1-29-14:
          requires:
            - build-artifact
      - scenario-unified-1-30-13:
          requires:
            - build-artifact
            - approve-test-all-platforms

      - scenario-unified-1-31-9:
          requires:
            - build-artifact
            - approve-test-all-platforms

      - scenario-unified-1-32-5:
          requires:
            - build-artifact
      - approve-internal-release:
          type: approval
          filters:
            branches:
              only:
                - '/^release-\d+\.\d+$/'
      - release-to-internal:
          context:
            - gcp-astronomer-prod
          filters:
            branches:
              only:
                - '/^release-\d+\.\d+$/'
          requires:
            - approve-internal-release
            - scenario-unified-1-29-14
            - scenario-unified-1-32-5
      - approve-upgrade-test:
          type: approval
          filters:
            branches:
              only:
                - '/^release-\d+\.\d+$/'
      - trigger-upgrade-test:
          requires:
            - release-to-internal
            - approve-upgrade-test
          filters:
            branches:
              only:
                - '/^release-\d+\.\d+$/'
      - approve-public-release:
          type: approval
          requires:
            - release-to-internal
            - scenario-unified-1-30-13
            - scenario-unified-1-31-9
          filters:
            branches:
              only:
                - '/^release-\d+\.\d+$/'
      - release-to-public:
          context:
            - gcp-astronomer-prod
            - github-repo
          requires:
            - approve-public-release
          filters:
            branches:
              only:
                - '/^release-\d+\.\d+$/'
      - sign-released-image:
          name: sign-release-image
          context:
            - quay.io
            - docker.io
            - software-cosign-keys
          requires:
            - release-to-public
          filters:
            branches:
              only:
                - '/^release-\d+\.\d+$/'

  release-bom-workflow:
    jobs:
      - release_bom:
          filters:
            tags:
              only: /^v\d+\.\d+\.\d+(-?(rc(\.\d+)?|alpha(\.\d+)?)?)?$/
            branches:
              ignore: /.*/
          context:
            - github-repo
            - gcp-astronomer-prod

  qa-build-and-release-helm-chart:
    when:
      and:
        - << pipeline.parameters.qa-release >>
        - not: << pipeline.parameters.scan-docker-images >>
    jobs:
      - run_pre_commit
      - test-unit
      - check-commander-airflow-version
      - build-artifact:
          qa_release: true
          requires:
            - check-commander-airflow-version
            - run_pre_commit
            - test-unit
      - release-to-internal:
          context:
            - gcp-astronomer-prod
          requires:
            - build-artifact
          filters:
            branches:
              only:
                - '/^release-\d+\.\d+$/'
      - trigger-feature-stack-release:
          requires:
            - release-to-internal
          filters:
            branches:
              only:
                - '/^release-\d+\.\d+$/'

commands:
  push-to-quay-io:
    description: "Push a Docker image to Quay.io"
    parameters:
      comma_separated_tags:
        type: string
        default: latest
      docker_repository:
        type: string
        default: $DOCKER_REPO
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
    steps:
      - setup_remote_docker:
          docker_layer_caching: true
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/<< parameters.image_name >>.tar
      - run:
          name: Login to Quay.io
          command: echo "$QUAY_PASSWORD" | docker login --username "$QUAY_USERNAME" --password-stdin quay.io
      - run:
          name: Push Docker image(s)
          command: |
            set -xe
            function docker_tag_exists() {
                curl --silent -f -lSL "https://quay.io/api/v1/repository/$1/tag/$2/images" > /dev/null
            }
            function tag_and_push() {
                docker tag "<< parameters.image_name >>" "quay.io/astronomer/<< parameters.image_name >>:$1"
                docker push "quay.io/astronomer/<< parameters.image_name >>:$1"
            }
            for tag in $(echo "<< parameters.comma_separated_tags >>" | sed "s/,/ /g");
            do
              # If the tag looks starts with "v" then a digit, remove the "v"
              pattern="^(v[0-9].*)"
              if [[ $tag =~ $pattern ]]; then
                tag="${tag:1}"
              fi
              if docker_tag_exists "<< parameters.docker_repository >>/<< parameters.image_name >>" "${tag}" ; then
                  if [[ "$tag" -eq "latest" ]]; then
                    tag_and_push "$tag"
                  else
                    echo "This docker tag already exists. Skipping the Docker push!"
                  fi
              else
                tag_and_push "$tag"
              fi
            done

  docker-build:
    description: "Build a Docker image"
    parameters:
      dockerfile:
        type: string
        default: Dockerfile
      path:
        type: string
        default: "."
      image_name:
        type: string
        default: $CIRCLE_PROJECT_REPONAME
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: Build the Docker image
          command: |
            set -xe
            image_name="<< parameters.image_name >>"
            docker build \
              -t "$image_name" \
              --file << parameters.path>>/<< parameters.dockerfile >> \
              --build-arg BUILD_NUMBER="${CIRCLE_BUILD_NUM}" \
              << parameters.path >>
            docker save -o << parameters.image_name >>.tar "$image_name"
      - persist_to_workspace:
          root: .
          paths:
            - "./<< parameters.image_name >>.tar"

  publish-github-release:
    description: "Create a release on GitHub"
    parameters:
      tag:
        type: string
        default: "$NEXT_TAG"
    steps:
      - run:
          name: Create a release on GitHub
          command: |
            set -xe
            pip install astronomer_e2e_test
            astronomer-ci publish-github-release --github-repository "$CIRCLE_PROJECT_REPONAME" --github-organization "$CIRCLE_PROJECT_USERNAME" --commitish "$CIRCLE_SHA1"

  trivy-docker-test:
    description: "Trivy: Vulnerability scan a Docker image"
    parameters:
      docker_image:
        type: string
    steps:
      - trivy/vulnerability-scan:
            docker-image: << parameters.docker_image >>
