#################################
## Astronomer global configuration
#################################
global:
  # Base domain for all subdomains exposed through ingress
  baseDomain: ~

  # Name of secret containing TLS certificate
  tlsSecret: ~

  # Use kube-lego
  acme: false

  # If RBAC on cluster is enabled
  rbacEnabled: true

  # URL to the Astronomer helm repo
  helmRepo: "https://helm.astronomer.io"

  # Host and port of where tiller is running in Kubernetes
  helmHost: "tiller-deploy.kube-system.svc.cluster.local:44134"

  # Single namespace mode
  singleNamespace: false

  # Enables necessary components for compatibility with Istio Service Mesh
  istio:
    enabled: false
    rootNamespace: "istio-config"

  # Enables necessary components for Velero (Velero, Grafana Dashboard, Prometheus Alerts)
  veleroEnabled: false

  # Enable default postgresql database.
  # This is not recommended for production.
  postgresqlEnabled: false

  # Enables a node exporter DaemonSet for node-level metrics
  nodeExporterEnabled: true

  prometheusPostgresExporterEnabled: false

  # Enables blackbox exporter
  blackboxExporterEnabled: true

  # Used to enable Celery autoscaling
  kedaEnabled: false

  # If PodSecurityPolicies (PSP) should be enabled
  pspEnabled: false

  # Set nodeSelector, affinity, and tolerations values for platform and deployment related pods.
  # This allows for separation of platform and airflow pods between kubernetes node pools.
  # Pods in the platformNodePool include alertmanager, cli-install, commander, houston, kube-replicator, astro-ui, prisma,
  # registry, es-client, es-data, es-exporter, es-master, nginx-es, grafana, kibana, kube-state, nginx, nginx-default, prometheus.
  # nodeSelector, affinity, and tolerations values for airflow deployment pods are assigned via houston config.
  # See more information on pod / node assignment here: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  platformNodePool:
    nodeSelector: &platformNodeSelector
      {}
    affinity: &platformAffinity
      {}
    tolerations: &platformTolerations
      []

  privateRegistry:
    enabled: false
    repository: ~

#################################
## Default tagged groups enabled
#################################
tags:
  # Enable platform components by default (nginx, astronomer)
  platform: true

  # Enable monitoring stack (prometheus, kube-state, grafana)
  monitoring: true

  # Enable logging stack (elasticsearch, fluentd, kibana)
  logging: true

  # Kubed
  kubed: true


#################################
## Astronomer configuration
#################################
astronomer:
  astroUI:
    resources:
      requests:
        cpu: "100m"
        memory: "256Mi"
      limits:
        cpu: "500m"
        memory: "1024Mi"

  houston:
    resources:
      requests:
        cpu: "500m"
        memory: "1024Mi"
      limits:
        cpu: "1000m"
        memory: "2048Mi"

  prisma:
    resources:
      requests:
        cpu: "250m"
        memory: "512Mi"
      limits:
        cpu: "500m"
        memory: "1024Mi"

  commander:
    resources:
      requests:
        cpu: "250m"
        memory: "512Mi"
      limits:
        cpu: "500m"
        memory: "1024Mi"

  registry:
    resources:
      requests:
        cpu: "250m"
        memory: "512Mi"
      limits:
        cpu: "500m"
        memory: "1024Mi"

    persistence:
      enabled: true
      size: "100Gi"

  install:
    resources:
      requests:
        cpu: "100m"
        memory: "256Mi"
      limits:
        cpu: "500m"
        memory: "1024Mi"


#################################
## Nginx configuration
#################################
nginx:
  # Configure resources
  resources:
    requests:
      cpu: "500m"
      memory: "1024Mi"
    limits:
      cpu: "1"
      memory: "2048Mi"

  # IP address the nginx ingress should bind to
  loadBalancerIP:

  # Used to restrict IPs which can reach the nginx ingress
  loadBalancerSourceRanges:


#################################
## Grafana configuration
#################################
grafana:
  # Configure resources
  resources:
    requests:
      cpu: "250m"
      memory: "512Mi"
    limits:
      cpu: "500m"
      memory: "1024Mi"

  dashboards: {}
   # default:
   #   velero:
   #     file: dashboards/velero.json

#################################
## Prometheus configuration
#################################
prometheus:
  podLabels: {}
  # Data retention
  retention: 15d

  # Persistence configuration
  persistence:
    enabled: true
    size: "150Gi"

  # Configure resources
  resources:
    requests:
      cpu: "1000m"
      memory: "4Gi"
    limits:
      cpu: "2000m"
      memory: "8Gi"

#################################
## KEDA configuration
#################################

keda:
  keda:
    nodeSelector:
      <<: *platformNodeSelector
    affinity:
      <<: *platformAffinity
    tolerations:
      *platformTolerations
#################################
## Blackbox Exporter configuration
#################################
prometheus-blackbox-exporter:
  # Configure resources
  resources:
    requests:
      cpu: "5m"
      memory: "7Mi"
    limits:
      cpu: "15m"
      memory: "20Mi"

# define what astronomer platform services will be checked
# for up/down status. Enable this will also include
# the required network policies
  astroServices:
    commander:
      enabled: true
    houston:
      enabled: true
    registry:
      enabled: true
    grafana:
      enabled: true
    elasticsearch:
      enabled: true
    kibana:
      enabled: true
    cliInstall:
      enabled: true

#################################
## Elasticsearch configuration
#################################
elasticsearch:
  # Common configuration
  common:
    persistence:
      enabled: true

  # Configure client nodes
  client:
    # Match resources.requests.memory
    heapMemory: "2g"

    resources:
      requests:
        cpu: "1"
        memory: "2Gi"
      limits:
        cpu: "2"
        memory: "4Gi"

  # Configure data nodes
  data:
    # Match resources.requests.memory
    heapMemory: "2g"

    resources:
      requests:
        cpu: "1"
        memory: "2Gi"
      limits:
        cpu: "2"
        memory: "4Gi"

    persistence:
      size: "100Gi"

  # Configure master nodes
  master:
    # Match resources.requests.memory
    heapMemory: "2g"

    resources:
      requests:
        cpu: "1"
        memory: "2Gi"
      limits:
        cpu: "2"
        memory: "4Gi"

    persistence:
      size: "20Gi"


#################################
## Kibana configuration
#################################
kibana:
  # Configure resources
  resources:
    requests:
      cpu: "250m"
      memory: "512Mi"
    limits:
      cpu: "500m"
      memory: "1024Mi"


#################################
## Fluentd configuration
#################################
# fluentd:
#   # Configure resources
#   resources:
#     requests:
#       cpu: "250m"
#       memory: "512Mi"
#     limits:
#       cpu: "500m"
#       memory: "1024Mi"


#################################
## Kube State configuration
#################################
kubeState:
  # Configure resources
  resources:
    requests:
      cpu: "250m"
      memory: "512Mi"
    limits:
      cpu: "500m"
      memory: "1024Mi"

#################################
## KubeD configuration
#################################
kubed:
  # Configure resources
  resources:
    requests:
      cpu: "250m"
      memory: "512Mi"
    limits:
      cpu: "2"
      memory: "1024Mi"
