---

- name: Set up variables
  set_fact:
    release_name: "astronomer"
    namespace: "default"
    db_hostname: "localhost"
    db_username: "postgres"
    db_password: "postgres"
    db_port: "5432"
    astro_save: "/astronomer-backups/astro-save-2020-10-08-13-45-07"

- name: Read revision from backup
  set_fact:
    helm_history: "{{ lookup('file', '{{ astro_save }}/helm-revision.json') | from_json }}"

- name: Show information the revision we are about to restore to
  changed_when: false
  debug:
    msg:
      - "Reverting to revision: {{ helm_history.revision }}"
      - "Helm chart was: {{ helm_history.chart }}"

- name: Ensure backup revision exists in Helm state
  community.kubernetes.k8s:
    state: present
    src: "{{ astro_save }}/helm-secret.yaml"
    namespace: "{{ namespace }}"

# First, we get rid of everything that touches the DB
- name: Ensure DB migration job is deleted
  community.kubernetes.k8s:
    state: absent
    api_version: v1
    kind: Job
    namespace: "{{ namespace }}"
    name: "{{ release_name }}-houston-db-migrations"

- name: Ensure Houston API is deleted
  community.kubernetes.k8s:
    state: absent
    api_version: v1
    kind: Deployment
    namespace: "{{ namespace }}"
    name: "{{ release_name }}-houston"
    wait: yes

- name: Ensure Houston workers are deleted
  community.kubernetes.k8s:
    state: absent
    api_version: v1
    kind: Deployment
    namespace: "{{ namespace }}"
    name: "{{ release_name }}-houston-workers"
    wait: yes

- name: Ensure Prisma is deleted
  community.kubernetes.k8s:
    state: absent
    api_version: v1
    kind: Deployment
    namespace: "{{ namespace }}"
    name: "{{ release_name }}-prisma"
    wait: yes

- name: Get a list of all Pods
  k8s_info:
    api_version: v1
    kind: Pod
    namespace: "{{ namespace }}"
  register: pod_list

- name: Delete all Houston pods
  when: "'houston' in item"
  community.kubernetes.k8s:
    state: absent
    api_version: v1
    kind: Pod
    namespace: "{{ namespace }}"
    name: "{{ item }}"
  with_items: "{{ pod_list.resources | map(attribute='metadata') | map(attribute='name') | list }}"

- name: Delete all Prisma pods
  when: "'prisma' in item"
  community.kubernetes.k8s:
    state: absent
    api_version: v1
    kind: Pod
    namespace: "{{ namespace }}"
    name: "{{ item }}"
  with_items: "{{ pod_list.resources | map(attribute='metadata') | map(attribute='name') | list }}"

- name: Deleting logs, rollback destroys logs because Elasticsearch version downgrade is not supported
  community.kubernetes.k8s:
    state: absent
    api_version: v1
    kind: StatefulSet
    namespace: "{{ namespace }}"
    name: "{{ item }}"
    wait: yes
  with_items:
    - "{{ release_name }}-elasticsearch-master"
    - "{{ release_name }}-elasticsearch-data"

- name: Deleting logs, rollback destroys logs because Elasticsearch version downgrade is not supported
  community.kubernetes.k8s:
    state: absent
    api_version: v1
    kind: StatefulSet
    namespace: "{{ namespace }}"
    name: "{{ item }}"
    wait: yes
  with_items:
    - "{{ release_name }}-elasticsearch-master"
    - "{{ release_name }}-elasticsearch-data"

- name: Get a list of all PersistentVolumeClaim objects
  k8s_info:
    api_version: v1
    kind: PersistentVolumeClaim
    namespace: "{{ namespace }}"
  register: pvc_list

- name: Delete Elasticsearch volumes
  when: "'elasticsearch' in item"
  community.kubernetes.k8s:
    state: absent
    api_version: v1
    kind: PersistentVolumeClaim
    namespace: "{{ namespace }}"
    name: "{{ item }}"
  with_items: "{{ pvc_list.resources | map(attribute='metadata') | map(attribute='name') | list }}"

# Then, we perform the restore
- name: Restore Astronomer DB, retrying until all connections are closed
  retries: 15
  delay: 2
  until: result is not failed
  register: result
  community.general.postgresql_db:
    login_host: "{{ db_hostname }}"
    login_user: "{{ db_username }}"
    login_password: "{{ db_password }}"
    state: restore
    target: "{{ astro_save }}/astronomer-db-backup.tar"
    # db: "{{ release_name }}_houston"
    # When you do pg_restore, the --dbname argument should be
    # postgres, the maintenance db. Otherwise, we are connected
    # to the DB we are trying to restore and that will cause
    # issues.
    db: postgres
    target_opts: "--clean --create"

# It is possible that we interrupted
# a lock on the migrations table when we
# backed up. So, we just delete this table right
# after restoring.
- name: Drop the migrations table
  postgresql_query:
    login_host: "{{ db_hostname }}"
    login_user: "{{ db_username }}"
    login_password: "{{ db_password }}"
    db: "{{ release_name }}_houston"
    query: "drop table migrations;"

- name: Rollback with Helm
  shell: |
    helm rollback {{ release_name }} {{ helm_history.revision }} --no-hooks
