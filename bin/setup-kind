#!/usr/bin/env bash
# shellcheck disable=SC1090
# This contents of this file must be compatible with CI and local dev workflows
set -euo pipefail

KUBE_VERSION="${KUBE_VERSION:-v1.15.11}"

# The path to the working directory - the root of the repo
REPO_DIR="$(git rev-parse --show-toplevel)"

echo "Beginning KIND setup with KUBE_VERSION=${KUBE_VERSION}"
echo "Checking tools are installed"

set +e

# Check required tools are installed
for executable in mkcert kind helm kubectl docker; do
  if command -v "$executable" > /dev/null 2>&1 ; then
    echo "$executable is in PATH"
  else
    echo "Please ensure $executable is installed and in PATH"
    exit 1
  fi
done

echo "Generating SSL keys..."
if "${REPO_DIR}/bin/generate_ssl_keys" ; then
  echo "Installed TLS secrets to /tmp/fullchain.pem and /tmp/privkey.pem"
else
  echo "Something went wrong... ðŸ˜­"
  exit 1
fi

# Fail if anything has non-zero exit code
set -xe

# Delete the old cluster, if it exists
kind delete cluster || true

KIND_OPTIONS=( --image "kindest/node:${KUBE_VERSION}" )
if [[ -n "${MULTI_NODE+x}" ]]; then
  KIND_OPTIONS+=( --config "$REPO_DIR/bin/kind/multi-node.yaml" )
fi

# Start a cluster
create_kind_cluster() {
  kind create cluster "${KIND_OPTIONS[@]}"
}
set +e
# I have found kind create cluster
# fails rarely, but since we are running
# so many in parallel, that it happens
# enough to justify a retry
if ! create_kind_cluster ; then
  set -e
  echo "Failed to create Kind cluster, trying one more time"
  kind delete cluster || true
  create_kind_cluster
fi
set -e

set +x
if [[ -n "${CORDON_NODE+x}" ]]; then
  kubectl cordon "$CORDON_NODE"
fi

kubectl get nodes

echo "Install requirements"
cd "$REPO_DIR/charts/postgresql"
helm dependency update .
cd "$REPO_DIR"

echo "Creating namespace 'astronomer'"
kubectl create namespace astronomer

(
  cd "${REPO_DIR}"
  mkcert -cert-file=server.pem -key-file=server.key server.example.org
  kubectl --namespace astronomer create secret generic "private-ca" --from-file="cert.pem=$(mkcert -CAROOT)/rootCA.pem"
)

echo "Installing TLS cert and private key"
kubectl create secret tls astronomer-tls \
  --key /tmp/privkey.pem \
  --cert /tmp/fullchain.pem \
  --namespace astronomer
