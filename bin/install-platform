#!/usr/bin/env bash
# Perform a CI test run. This must be functional in CircleCI and on a local dev workstation. (IE: does not delete any user settings.)
# Usage: install-platform [component ... component]
# Example: install-platform platform postgresql kubed keda
set -euo pipefail

REPO_DIR="$(git rev-parse --show-toplevel)"
BIN_DIR="${REPO_DIR}/bin"
# shellcheck disable=SC1090
source "$BIN_DIR/helpers.sh"
HELM_CHART_PATH="${HELM_CHART_PATH:-$REPO_DIR}"

if [ ! -d "${HELM_CHART_PATH}" ] ; then
  HELM_CHART_PATH=$(find "${HELM_CHART_PATH}" -print -quit)
fi

helm_args=()

echo "Deploying Astronomer..."

# No args means all
platform=true
logging=true
monitoring=true
kubed=true
postgresql=true
keda=true
ACTION="install"

# Any args means be selective
if [ $# -ne 0 ]; then
  platform=false
  logging=false
  monitoring=false
  kubed=false
  postgresql=false
  keda=false
  for component in "$@" ; do
    case "$component" in
    install)
      ACTION="install" ;;
    template)
      ACTION="template" ;;
    dryrun)
      helm_args+=( "--dry-run" ) ;;
    all)
      platform=true
      logging=true
      monitoring=true
      kubed=true
      postgresql=true
      keda=true
      ;;
    *)
      export $component=true ;;
    esac
  done
fi

set +ex

helm_args+=( --timeout "${HELM_TIMEOUT:-800}s" )

if [[ -z "${USE_HA+x}" ]]; then
  helm_args+=( -f "$REPO_DIR/configs/local-dev.yaml" )
else
  helm_args+=( -f "$REPO_DIR/configs/local-dev-ha.yaml" )
fi

set -x
helm "${ACTION}" \
  --namespace astronomer \
  astronomer \
  "${helm_args[@]}" \
  --set tags.platform="${platform}" \
  --set tags.logging="${logging}" \
  --set tags.monitoring="${monitoring}" \
  --set tags.kubed="${kubed}" \
  --set global.postgresqlEnabled="${postgresql}" \
  --set tags.keda="${keda}" \
  --set astronomer.houston.upgradeDeployments.enabled=true \
  "${HELM_CHART_PATH}"

# shellcheck disable=SC2181
if [ $? -ne 0 ] ; then
  set +x
  echo "Helm chart failed to install"
  get_debugging_info
  exit 1
fi
