#!/usr/bin/env bash
# shellcheck disable=SC1090
set -eo pipefail

help() {
  echo "Description:"
  echo "    Releases the given helm chart to helm-dev, or publicly if '-p' is passed."
  echo
  echo "Usage:"
  echo "    ${0##*/} [-x] <helm_chart_path>"
  echo "    -p    release a helm-dev chart to public"
  echo "    -h    show this help documentation"
  echo "    -x    set -o xtrace"
}

public_release='0'

# If the first character of optstring is a colon, silent error reporting is used.
# If a character is followed by a colon, the option is expected to have an argument
while getopts ':hpx' option ; do
  case "${option}" in
    p) public_release=1 ;;
    h) help ; exit ;;
    x) set -x ;;
    *) help ; exit 1 ;
  esac
done
shift $((OPTIND - 1))

hr() {
  echo
  date "+==================== %F %T%z ===================="
  echo
}

if [[ "${#@}" -eq 0 ]] ; then
  echo "ERROR: missing helm_chart_path"
  echo
  help
  exit 1
fi

dev_repo="internal-helm.astronomer.io"
pub_repo="helm.astronomer.io"

helm_chart_path="$1"
if [ "${public_release}" == "1" ] ; then
  target_repo="${pub_repo}"
  target_env="helm-pub"
else
  [ -f "${helm_chart_path}" ] || { echo "ERROR: helm_chart_path isn't a file" ; exit 1 ; }
  target_repo="${dev_repo}"
  target_env="helm-dev"
fi

pre-flight-setup() {
  # Set script_path to the path of this script
  script_path="${0%/*}"

  "$script_path/install-ci-tools"
  export PATH="/tmp/bin:$PATH"

  command -v sudo >/dev/null 2>&1
  command -v apt-get >/dev/null 2>&1
  set +e
  command -v tree >/dev/null 2>&1 || {
    hr
    sudo apt-get update > /dev/null
    sudo apt-get install -y tree > /dev/null
    hr
  }
  set -e

  # Ensure we have a new directory
  rm -rf /tmp/astronomer-chart-release || true
  mkdir -p /tmp/astronomer-chart-release
  cd /tmp/astronomer-chart-release

  # This is needed to avoid using the CI's built-in gcloud configurations.
  export BOTO_CONFIG=/dev/null

  set +x
  echo "${GCP_TOKEN}" > /tmp/gcs_token.json
  gcloud auth activate-service-account --key-file=/tmp/gcs_token.json
}

process_and_release_chart_file() {
  # Unzip the artifact
  tar -xvzf "$helm_chart_path" -C .

  hr

  # show all the files that are in the unzipped artifact
  echo "Artifact contents:"
  tree ./astronomer

  hr

  echo "Releasing chart..."

  set -x
  # Set up the index.html file
  wget "https://${target_repo}/index.yaml" -O /tmp/index.yaml.current
  helm repo index . --url "https://${target_repo}" --merge /tmp/index.yaml.current

  gsutil cp "$helm_chart_path" "gs://${target_repo}"
  gsutil -h "Cache-Control: public, max-age=300" cp ./index.yaml "gs://${target_repo}"

  set +x
  hr
  echo "Chart released to ${target_env}"
}

release_to_dev() {
  hr
  echo "Release to dev"

  # Copy the artifact
  cp "$helm_chart_path" .

  process_and_release_chart_file
}

release_to_pub() {
  hr
  echo "Release to pub"

  # Fetch artifact from helm-dev
  wget "http://$dev_repo/${helm_chart_path##*/}"

  process_and_release_chart_file
}

pre-flight-setup

if [ "${public_release}" == "1" ] ; then
  release_to_pub
else
  release_to_dev
fi
